@using System.ComponentModel.DataAnnotations
@using System.Reactive.Disposables
@using Microsoft.AspNetCore.Components
@using Strem.Core.Extensions
@using Strem.Flows.Data
@using Strem.Flows.Default.Components.App.Models

@inherits ValidatedComponent<Strem.Flows.Default.Components.App.Models.FlowCreatorFormData>

<EditForm EditContext="EditContext">
    <h3 class="title is-3 has-text-black">Create Flow</h3>
    <div class="field">
        <label class="label">Name</label>
        <div class="control">
            <TextInput placeholder="i.e Play A Meme" @bind-Value="Data.Name"/>
        </div>
    </div>
    <div class="field">
        <label class="label">Category</label>
        <div class="control">
            <TextInput placeholder="i.e Memes" @bind-Value="Data.Category" />
        </div>
        <HelperInfo>Flow categories help you group flows with similar functionality or context for easier viewing</HelperInfo>
    </div>
</EditForm>
@if (!IsValid)
{
    <ValidationMessageContainer Messages="EditContext.GetValidationMessages()"/>
}
<div class="field is-grouped">
    <div class="control">
        <button class="button is-primary" @onclick="CreateFlow" disabled="@(!IsValid)">Create</button>
    </div>
    <div class="control">
        <button class="button is-link is-light" @onclick="CancelFlow">Cancel</button>
    </div>
</div>

@code {
    
    [Parameter] 
    public EventCallback<Flow> OnFlowCreated { get; set; }
    
    [Parameter] 
    public EventCallback OnCancelled { get; set; }

    protected override Task OnInitializedAsync()
    {
        Data = new FlowCreatorFormData();
        return base.OnInitializedAsync();
    }

    public void CreateFlow()
    {
        var newFlow = new Flow(Guid.NewGuid(), Data.Name, Data.Category);
        Data.Name = string.Empty;
        Data.Category = string.Empty;
        OnFlowCreated.InvokeAsync(newFlow);
    }

    public void CancelFlow()
    {
        Data.Name = string.Empty;
        Data.Category = string.Empty;
        OnCancelled.InvokeAsync();
    }
}