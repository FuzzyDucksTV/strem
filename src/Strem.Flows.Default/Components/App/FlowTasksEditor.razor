@using Strem.Core.Extensions
@using Strem.Core.Events.Bus
@using System.Reactive.Disposables
@using System.Reactive.Linq
@using Strem.Core.Components.Elements.Drag
@using Strem.Core.Services.Utils
@using Strem.Core.Types
@using Strem.Flows.Data
@using Strem.Flows.Data.Tasks
@using Strem.Flows.Services.Registries.Tasks

@inject ITaskRegistry TaskRegistry
@inject IEventBus EventBus
@inject DragController DragController
@inject IRandomizer Randomizer

@implements IDisposable

@if (TaskData.Count == 0)
{
    <DraggableElement Data="@ScopeContext" DropType="@DropTypes.None" SupportedDropTypes="new []{ DropTypes.NewTask }" 
                      CanDrag="false" Classes="notification has-text-centered">
        <p class="title is-5 has-text-black-ter">Drag tasks in here to give your flow something to do</p>
    </DraggableElement>
}

@foreach (var data in TaskData)
{
    <DraggableListElement Data="data" DropType="@DropTypes.FlowTask" ContainingList="TaskData" 
                          SupportedDropTypes="@(new []{ DropTypes.FlowTask, DropTypes.NewTask })" @key="data.Id">
        <TaskComponent Data="data" ComponentType="GetComponentFor(data)" IsRunning="@(ActiveTaskId == data.Id)" @key="data.Id"
                               OnRequestedDeletion="RemoveTaskData" DataChanged="() => TaskDataChanged(data.Id)" Task="GetTaskFor(data)"/>
    </DraggableListElement>

    if (data is IHasSubTaskData subTaskData && subTaskData.SubTaskKeys.Length > 0)
    {
        foreach (var subKey in subTaskData.SubTaskKeys)
        {
            <ul class="sub-tasks @subKey">
                <p class="menu-label">@subKey</p>
                <FlowTasksEditor TaskData="@subTaskData.SubTasks[subKey]" TaskDeleted="x => TaskDeleted.InvokeAsync(x)"
                                 TaskAdded="x => TaskAdded.InvokeAsync(x)" TasksMoved="() => TasksMoved.InvokeAsync()" />
            </ul>
        }
    }
}

@code {
    [Parameter]
    public List<IFlowTaskData> TaskData { get; set; }
    
    [Parameter]
    public EventCallback<Guid> TaskDeleted { get; set; }
    
    [Parameter]
    public EventCallback<Guid> TaskAdded { get; set; }
    
    [Parameter]
    public EventCallback<Guid> TasksMoved { get; set; }
    
    [Parameter]
    public EventCallback<Guid> TaskChanged { get; set; }
    
    public Type GetComponentFor(IFlowTaskData data) => TaskRegistry.Get(data.Code).ComponentType;
    public IFlowTask GetTaskFor(IFlowTaskData data) => TaskRegistry.Get(data.Code).Task;

    public Guid ActiveTaskId { get; set; }
    public string ScopeContext { get; set; }
  
    private CompositeDisposable _subs = new();

    protected override async Task OnInitializedAsync()
    {
        // We do this to differentiate nested recursive scopes
        ScopeContext = Randomizer.RandomString(30);
        
        DragController.OnDroppedItem
            .Where(x => x.SourceDropType == DropTypes.FlowTask && 
                        x.DestinationDropType == DropTypes.FlowTask && 
                        Equals(x.DestinationList, TaskData))
            .Subscribe(MoveTaskElement)
            .AddTo(_subs);
        
        DragController.OnDroppedItem
            .Where(x => x.SourceDropType == DropTypes.NewTask && 
                        x.DestinationDropType == DropTypes.FlowTask && 
                        Equals(x.DestinationList, TaskData))
            .Subscribe(AddNewTaskIntoExisting)
            .AddTo(_subs);
        
        DragController.OnDroppedItem
            .Where(x => x.SourceDropType == DropTypes.NewTask && 
                        x.DestinationDropType == DropTypes.None &&
                        ScopeContext.Equals(x.DestinationObject))
            .Subscribe(AddNewTaskIntoFresh)
            .AddTo(_subs);
    }

    public void RemoveTaskData(IFlowTaskData data)
    {
        TaskData.Remove(data);
        TaskDeleted.InvokeAsync(data.Id);
    }

    public void MoveTaskElement(DropData args)
    {
        args.SourceList.Remove(args.SourceObject);
        var indexToAddAt = args.DestinationList.IndexOf(args.DestinationObject) + 1;
        if (indexToAddAt == args.DestinationList.Count)
        { args.DestinationList.Add(args.SourceObject); }
        else
        { args.DestinationList.Insert(indexToAddAt, args.SourceObject); }

        var taskData = args.SourceObject as IFlowTaskData;
        TasksMoved.InvokeAsync(taskData.Id);
        InvokeAsync(StateHasChanged);
    }

    public void AddNewTaskIntoExisting(DropData args)
    {
        var taskDescriptor = args.SourceObject as TaskDescriptor;
        if(taskDescriptor == null) { return; }
        var newTaskData = taskDescriptor.Data();
        
        var indexToAddAt = args.DestinationList.IndexOf(args.DestinationObject) + 1;
        if (indexToAddAt == args.DestinationList.Count)
        { args.DestinationList.Add(newTaskData); }
        else
        { args.DestinationList.Insert(indexToAddAt, newTaskData); }

        TaskAdded.InvokeAsync(newTaskData.Id);
        InvokeAsync(StateHasChanged);
    }
    
    public void AddNewTaskIntoFresh(DropData args)
    {
        var taskDescriptor = args.SourceObject as TaskDescriptor;
        if(taskDescriptor == null) { return; }
        
        var newTaskData = taskDescriptor.Data();
        TaskData.Add(newTaskData);
        TaskAdded.InvokeAsync(newTaskData.Id);
        InvokeAsync(StateHasChanged);
    }

    public void TaskDataChanged(Guid taskId)
    { TaskChanged.InvokeAsync(taskId); }

    public void Dispose()
    { _subs?.Dispose(); }
}