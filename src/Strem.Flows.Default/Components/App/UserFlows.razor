@using Strem.Core.Extensions
@using Strem.Core.Events.Bus
@using System.Reactive.Disposables
@using Strem.Core.Services.Notifications
@using Strem.Flows.Data
@using Strem.Flows.Events
@using Strem.Flows.Services.Stores

@inject IFlowStore FlowStore;
@inject IEventBus EventBus;
@inject INotifier Notifier;

@implements IDisposable

<Accordion Title="Flow Filter" HeaderClasses="is-primary">
  <div class="field">
    <label class="label">Filter Flows By Name</label>
    <div class="control">
      <TextInput placeholder="Put in the partial name of a flow" @bind-Value="SearchCriteria"/>
    </div>
  </div>
</Accordion>
<div class="box">
  <div class="field">
    <div class="control">
      <button class="button is-success is-leveled" @onclick="() => ShowCreateModal = true">
        <span class="icon is-small">
          <i class="fas fa-code-commit"></i>
        </span>
        <span>Add Flow</span>
      </button>
    </div>
  </div>
  @if (SelectedFlow != null)
  {
    <div class="field">
      <div class="control">
        <button class="button is-danger is-leveled" @onclick="() => ShowDeleteModal = true">
          <span class="icon is-">
            <i class="fas fa-code-commit"></i>
          </span>
          <span>Delete Current Flow</span>
        </button>
      </div>
    </div>
  }
  <aside class="menu flow-menu">
    @foreach (var flowGroup in GetFilteredFlows())
    {
      <p class="menu-label category-@(string.IsNullOrEmpty(flowGroup.Key) ? "none" : $"{flowGroup.Key}"))">
        <span>@(string.IsNullOrEmpty(flowGroup.Key) ? "None" : $"{flowGroup.Key}")</span>
      </p>
      <ul class="menu-list">
        @foreach (var flow in flowGroup)
        {
          <li>
            <a class="is-flow @(flow.Enabled ? "enabled" : "disabled") @(SelectedFlow?.Id == flow.Id ? "is-active" : "")"
               @onclick="() => SelectFlow(flow)">@flow.Name</a>
          </li>
        }
      </ul>
    }
  </aside>
</div>

<Modal IsVisible="ShowCreateModal">
  <FlowCreator OnFlowCreated="OnFlowCreated" OnCancelled="OnModalCancelled"></FlowCreator>
</Modal>

<Modal IsVisible="ShowDeleteModal">
  @if (SelectedFlow != null)
  {
    <ConfirmDeletion DeletingName="@SelectedFlow.Name" OnDeletion="OnDeleteCurrentFlow" OnCancelled="OnModalCancelled"></ConfirmDeletion>
  }
</Modal>

@code {
  [Parameter] 
  public EventCallback<Flow> OnFlowSelected { get; set; }

  public bool ShowCreateModal { get; set; }
  public bool ShowDeleteModal { get; set; }
  
  public Flow? SelectedFlow { get; set; }
  public string SearchCriteria { get; set; }

  private CompositeDisposable _subs = new();

  protected override async Task OnInitializedAsync()
  {
    EventBus.Receive<FlowEnabledEvent>()
      .Subscribe(x => InvokeAsync(StateHasChanged))
      .AddTo(_subs);
    
    EventBus.Receive<FlowDisabledEvent>()
      .Subscribe(x => InvokeAsync(StateHasChanged))
      .AddTo(_subs);
  }

  public IEnumerable<IGrouping<string, Flow>> GetFilteredFlows()
  {
    if (string.IsNullOrEmpty(SearchCriteria))
    { return FlowStore.Data.GroupBy(x => x.Category); }
    
    return FlowStore.Data
      .Where(x => x.Name.Contains(SearchCriteria, StringComparison.OrdinalIgnoreCase))
      .GroupBy(x => x.Category);
  }
  
  public void OnFlowCreated(Flow newFlow)
  {
    FlowStore.Add(newFlow);
    SelectFlow(newFlow);
    ShowCreateModal = false;
    EventBus.PublishAsync(new FlowAddedEvent(newFlow.Id));
  }

  public void OnFlowHasBeenRemoved()
  {
    SelectedFlow = null;
    OnFlowSelected.InvokeAsync(null);
    InvokeAsync(StateHasChanged);
  }

  public void OnModalCancelled()
  {
    ShowCreateModal = false;
    ShowDeleteModal = false;
  }

  public void SelectFlow(Flow selectedFlow)
  {
    SelectedFlow = selectedFlow;
    OnFlowSelected.InvokeAsync(selectedFlow);
  }
  
  public void Dispose()
  {
    _subs?.Dispose();
  }

  private void OnDeleteCurrentFlow()
  {
    if (!FlowStore.Remove(SelectedFlow?.Id ?? Guid.Empty)) { return; }
    
    Notifier.ShowNotification($"Flow '{SelectedFlow.Name}' Has Been Deleted", "is-danger");
    SelectFlow(null);
    InvokeAsync(StateHasChanged);
    OnModalCancelled();
  }
}