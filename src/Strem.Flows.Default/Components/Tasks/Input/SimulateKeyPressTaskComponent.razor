@using Strem.Core.Types
@using Strem.Core.Types.Input

@inherits CustomTaskComponent<Strem.Flows.Default.Flows.Tasks.Input.SimulateKeyPressTaskData>

<div class="columns">
    <div class="column">
        <label class="label is-5">Modifiers</label>
        <div class="block">
            <button class="button is-info" @onclick="() => Data.KeyModifiers.Add(InputKeyCodes.SHIFT)">Add Modifier Key</button>
        </div>
        @for (var i = 0; i < Data.KeyModifiers.Count; i++)
        {
            var index = i;
            <div class="field has-addons">
                <div class="control">
                    <div class="select">
                        <DataSelectInput @bind-Value="@Data.KeyModifiers[index]" Data="Modifiers" GetName="MakeKeyCodeNice"></DataSelectInput>
                    </div>
                </div>
                <div class="control">
                    <button class="button is-danger" @onclick="() => InvokeAsync(() => Data.KeyModifiers.RemoveAt(index))">
                        <span class="icon is-small">
                          <i class="fas fa-times"></i>
                        </span>
                      </button>
                </div>
            </div>
        }
    </div>
    <div class="column">
        <label class="label is-5">Keys</label>
        <div class="block">
            <button class="button is-info" @onclick="() => Data.KeysToPress.Add(InputKeyCodes.VK_A)">Add Key</button>
        </div>
        @for (var i = 0; i < Data.KeysToPress.Count; i++)
        {
            var index = i;
            <div class="field has-addons">
                <div class="control">
                    <DataSelectInput @bind-Value="@Data.KeysToPress[index]" Data="NormalKeys" GetName="MakeKeyCodeNice"></DataSelectInput>
                </div>
                <div class="control">
                    <button class="button is-danger" @onclick="() => InvokeAsync(() => Data.KeysToPress.RemoveAt(index))">
                        <span class="icon is-small">
                          <i class="fas fa-times"></i>
                        </span>
                      </button>
                </div>
            </div>
        }
    </div>
</div>

@code {
    public static readonly InputKeyCodes[] Modifiers = new[]{
        InputKeyCodes.SHIFT,
        InputKeyCodes.LSHIFT,
        InputKeyCodes.RSHIFT,
        InputKeyCodes.CONTROL,
        InputKeyCodes.LCONTROL,
        InputKeyCodes.RCONTROL,
        InputKeyCodes.LWIN,
        InputKeyCodes.RWIN,
        InputKeyCodes.MENU,
        InputKeyCodes.LMENU,
        InputKeyCodes.RMENU
    };

    public static readonly InputKeyCodes[] NormalKeys = Enum.GetValues<InputKeyCodes>()
        .Where(x => !Modifiers.Contains(x))
        .ToArray();

    public string MakeKeyCodeNice(InputKeyCodes keycode)
    { return keycode.ToString().Replace("VK_", "").Replace("MENU", "ALT"); }
    
    public override string Title => GenerateTitle();

    public string GenerateTitle()
    {
        var modifierKeys = string.Join(", ", Data.KeyModifiers.Select(MakeKeyCodeNice));
        var normalKeys = string.Join(", ", Data.KeysToPress.Select(MakeKeyCodeNice));
        var starter = modifierKeys.Length > 0 ? "Holding " : "Pressing ";
        var follower = modifierKeys.Length > 0 ? " Then " : "";
        return $"Simulate {starter} <strong>{modifierKeys}</strong>{follower}<strong>{normalKeys}</strong>";
    }
}