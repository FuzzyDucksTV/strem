@using Strem.Core.Types

@inherits CustomTaskComponent<Strem.Flows.Default.Flows.Tasks.Variables.RegexToVariableTaskData>
 <div class="field">
    <label class="label">Source Text/Variable To Match Against</label>
     <div class="control">
         <ProcessedInput @bind-Value="Data.Source" Placeholder="i.e V(chat.message, twitch)"/>
     </div>
</div>

<div class="field">
    <label class="label">Regex Pattern</label>
    <div class="control">
        <input class="input" type="text" @bind="Data.Pattern" placeholder="i.e Thank you (.*) for using your points">
    </div>
</div>
    
<Accordion Title="Regex Pattern Tester">
    <RegexTester RegexPattern="@Data.Pattern" ShowCaptures="true"></RegexTester>
</Accordion>
    
<div class="field">
    <label class="label">Output Variable Name</label>
    <div class="control">
        <input class="input" type="text" placeholder="i.e deaths" @bind="Data.Name">
    </div>
</div>
<div class="field">
    <label class="label">Optional Context</label>
    <div class="control">
        <ProcessedInput @bind-Value="Data.Context" Placeholder="i.e V(channel-game, twitch)"></ProcessedInput>
    </div>
    <HelperInfo>The context is optional and allows you to use the same variable name but tie it to some other context</HelperInfo>
</div>
<div class="field">
    <label class="label">Output Variable Scope</label>
    <div class="control">
        <div class="select has-tooltip-multiline">
            <select @bind="Data.ScopeType">
                <EnumSelectOptions EnumType="typeof(VariableScopeType)"></EnumSelectOptions>
            </select>
        </div>
    </div>
    <HelperInfo>Persisted are available even after app closes, Application is available until app closes, Flow is only for the rest of this flow</HelperInfo>
</div>

@code {
    public override string Title => GenerateTitle();
    
    public string GenerateTitle()
    {
        var contextSection = string.IsNullOrEmpty(Data.Context) ? "" : $":{Data.Context}";
        return $"Extract Matches For <strong>{Data.Pattern}</strong> Into Variable <strong>{Data.Name}{contextSection}</strong> In <strong>{Data.ScopeType}</strong> Scope";
    }
}