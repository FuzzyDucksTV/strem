@using Strem.Core.Types

@inherits CustomTaskComponent<Strem.Flows.Default.Flows.Tasks.Variables.SetVariableTaskData>

<div class="field">
    <label class="label">Variable Name</label>
    <div class="control">
        <input class="input" type="text" placeholder="i.e deaths" @bind="Data.Name">
    </div>
</div>
<div class="field">
    <label class="label">Optional Context</label>
    <div class="control">
        <input class="input" type="text" placeholder="i.e V(channel-game, twitch)" @bind="Data.Context">
    </div>
    <HelperInfo>The context is optional and allows you to use the same variable name but tie it to some other context</HelperInfo>
</div>
<div class="field">
    <label class="label">Variable Scope</label>
    <div class="control">
        <div class="select">
            <select @bind="Data.ScopeType">
                <EnumSelectOptions EnumType="typeof(VariableScopeType)"></EnumSelectOptions>
            </select>
        </div>
    </div>
    <HelperInfo>Persisted vars are saved and available even after app closes, Application vars are available until app closes, Flow vars are only available for the rest of the flow</HelperInfo>
</div>

<div class="field">
    <label class="label">Variable Value</label>
    <div class="control">
        <input class="input has-tooltip-multiline" type="text" placeholder="i.e 1" @bind="Data.Value">
    </div>
    <HelperInfo>The value can be anything, a bit of text, a number and accepts dynamic var inputs i.e V(some-var, some-context)"</HelperInfo>
</div>

@code {
    public override string Title => GenerateTitle();

    public string GenerateTitle()
    {
        var contextSection = string.IsNullOrEmpty(Data.Context) ? "" : $":{Data.Context}";
        return $"Set Variable <strong>{Data.Name}{contextSection}</strong> In <strong>{Data.ScopeType}</strong> Scope";
    }
}