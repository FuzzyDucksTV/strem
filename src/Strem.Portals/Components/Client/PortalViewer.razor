@using Strem.Infrastructure.Extensions
@using Strem.Core.Events.Bus
@using Strem.Core.Extensions
@using Strem.Portals.Data
@using Strem.Portals.Data.Overrides
@using Strem.Portals.Events
@using Strem.Portals.Extensions
@using Strem.Portals.Types
@using System.Reactive.Disposables
@using System.Reactive.Linq

@implements IDisposable

<section class="hero is-dark is-fullheight">
    <div class="hero-body is-align-items-stretch">
        <div class="container is-fluid">
            <p class="title">@Portal.Name</p>
            <div class="portal-page @(Enum.GetName(Portal.ButtonSize).ToLower()) box"
                 data-portal-id="@Portal.Id" data-portal-name="@Portal.Name">
                <div class="is-flex is-flex-direction-row is-flex-wrap-wrap">
                    @foreach (var buttonData in Portal.Buttons)
                    {
                        var buttonStyles = ButtonRuntimeStyles.GetButtonStyles(PortalId, buttonData.Id) ?? buttonData.DefaultStyles;
                        <a data-button-id="@buttonData.Id" data-button-name="@buttonData.Name" class="button portal-button m-3 is-flex is-flex-direction-column"
                           style="background-color: @buttonStyles.BackgroundColor; color: @buttonStyles.TextColor" @onclick="() => NotifyButtonPressed(buttonData)">
                            @if (buttonStyles.ButtonType == ButtonType.IconButton)
                            {
                                <span class="icon fa-3x m-auto">
                                    <i class="fas @buttonStyles.IconClass"></i>
                                </span>
                            }
                            else if (buttonStyles.ButtonType == ButtonType.ImageButton)
                            {
                                <figure class="image @GetImageSize(Portal.ButtonSize)">
                                    <img alt="@buttonStyles.Text" src="@buttonStyles.ImageUrl.GetImageUrl()" class="is-full" />
                                </figure>
                            }
                            <label class="label @GetTextSize(Portal.ButtonSize)" style="white-space: break-spaces; color: @(@buttonStyles.TextColor)">@buttonStyles.Text</label>
                        </a>
                    }
                </div>
            </div>
        </div>
    </div>
</section>

@code {
    [Parameter]
    public Guid PortalId { get; set; }
    public PortalData Portal { get; set; }
    
    public ButtonRuntimeStyles ButtonRuntimeStyles { get; set; }
    public IEventBus EventBus { get; set; }

    private CompositeDisposable _subs = new();
    
    protected override async Task OnInitializedAsync()
    {
        EventBus = WebHostHackExtensions.ServiceLocator.GetService<IEventBus>();
        ButtonRuntimeStyles = WebHostHackExtensions.ServiceLocator.GetService<ButtonRuntimeStyles>();
        
        var portalStore = WebHostHackExtensions.ServiceLocator.GetService<IPortalStore>();
        Portal = portalStore.Portals.SingleOrDefault(x => x.Id == PortalId);

        EventBus.Receive<PortalChangedEvent>()
            .Subscribe(x => InvokeAsync(StateHasChanged))
            .AddTo(_subs);
        
        EventBus.Receive<ButtonChangedEvent>()
            .Throttle(TimeSpan.FromSeconds(2))
            .Subscribe(x => InvokeAsync(StateHasChanged))
            .AddTo(_subs);
    }

    public void NotifyButtonPressed(ButtonData buttonData)
    {
        EventBus.PublishAsync(new ButtonPressedEvent
        {
            PortalId = Portal.Id,
            PortalName = Portal.Name,
            ButtonId = buttonData.Id,
            ButtonName = buttonData.Name
        });
    }
    
    private string GetImageSize(ButtonSize portalButtonSize)
    {
        if(portalButtonSize == ButtonSize.Medium) { return "is-128x128"; }
        if(portalButtonSize == ButtonSize.Large) { return "is-160x160"; }
        return "is-96x96";
    }
    
    private string GetTextSize(ButtonSize portalButtonSize)
    {
        if(portalButtonSize == ButtonSize.Medium) { return "is-size-7"; }
        if(portalButtonSize == ButtonSize.Large) { return "is-size-6"; }
        return "is-size-7";
    }

    public void Dispose()
    {
        _subs.Dispose();
    }

}