@using Strem.Infrastructure.Extensions
@using Strem.Core.Events.Bus
@using Strem.Core.Extensions
@using Strem.Portals.Data
@using Strem.Portals.Data.Overrides
@using Strem.Portals.Events
@using Strem.Portals.Extensions
@using System.Reactive.Disposables
@using System.Reactive.Linq
@using Strem.Portals.Events.Base
@using Strem.Portals.Services.Stores
@using Strem.Todos.Data
@using Strem.Todos.Events
@using Strem.Todos.Events.Base
@using Strem.Todos.Services.Stores

@implements IDisposable

<section class="hero is-dark is-fullheight">
    <div class="hero-body is-align-items-stretch">
        <div class="container is-fluid">
            <p class="title">@Portal.Name</p>
            <div class="columns">
                <div class="column">
                    <div class="portal-page portal-viewer box">
                        <div class="is-flex is-flex-direction-row is-flex-wrap-wrap">
                            @for (var i = 0; i < Portal.ButtonGridSize; i++)
                            {
                                var possibleButton = GetButtonAt(i);
                                if (possibleButton == null)
                                {
                                    <PlaceholderButton ButtonSize="Portal.ButtonSize" />
                                }
                                else
                                {
                                    <PortalButton ButtonId="possibleButton.Id" ButtonStyles="ButtonRuntimeStyles.GetButtonStyles(Portal.Id, possibleButton.Id)" 
                                                  ButtonPressed="() => NotifyButtonPressed(possibleButton)" ButtonSize="Portal.ButtonSize"/>
                                }
                            }
                        </div>
                    </div>
                </div>
                @if (Portal.ShowTodos)
                {
                    var filteredTodos = GetFilteredTodos().ToArray();
                    if (filteredTodos.Length > 0)
                    {
                        <div class="column is-one-third todo-section">
                            <div class="box">
                                <PagedContent Data="filteredTodos" ElementsPerPage="5" Context="Todo" OrderBy="x => x.ExpiryDate">
                                    <TodoEntry Todo="Todo" OnTodoComplete="OnTodoCompleted"></TodoEntry>
                                </PagedContent>
                            </div>
                        </div>
                    }
                }
            </div>
        </div>
    </div>
</section>

@code {
    [Parameter]
    public Guid PortalId { get; set; }
    public PortalData Portal { get; set; }
    
    public ButtonRuntimeStyles ButtonRuntimeStyles { get; set; }
    public IEventBus EventBus { get; set; }
    public ITodoStore TodoStore { get; set; }

    private CompositeDisposable _subs = new();
    
    protected override async Task OnInitializedAsync()
    {
        EventBus = WebHostHackExtensions.ServiceLocator.GetService<IEventBus>()!;
        ButtonRuntimeStyles = WebHostHackExtensions.ServiceLocator.GetService<ButtonRuntimeStyles>()!;
        var portalStore = WebHostHackExtensions.ServiceLocator.GetService<IPortalStore>()!;
        TodoStore = WebHostHackExtensions.ServiceLocator.GetService<ITodoStore>()!;
        var logger = WebHostHackExtensions.ServiceLocator.GetService<ILogger<PortalViewer>>()!;
        Portal = portalStore.Get(PortalId);

        if (Portal == null)
        {
            logger.Error($"Unable to find portal for {PortalId}");
            return;
        }

        EventBus.ReceiveAs<PortalEvent, PortalChangedEvent, PortalCreatedEvent, PortalRemovedEvent, PortalButtonChangedEvent>()
            .Where(x => x.PortalId == PortalId)
            .Subscribe(x => InvokeAsync(StateHasChanged))
            .AddTo(_subs);
        
        EventBus.ReceiveAs<TodoEvent, TodoCreatedEvent, TodoRemovedEvent>()
            .Subscribe(x => InvokeAsync(StateHasChanged))
            .AddTo(_subs);
    }
    
    public IEnumerable<TodoData> GetFilteredTodos()
    {
        if (Portal.TodoTags.Count == 0)
        { return TodoStore.Data; }

        return TodoStore.Data
            .Where(x => x.Tags.All(tag => Portal.TodoTags.Contains(tag, StringComparer.OrdinalIgnoreCase)));
    }

    public void NotifyButtonPressed(ButtonData buttonData)
    { EventBus.PublishAsync(new PortalButtonPressedEvent(Portal.Id, Portal.Name, buttonData.Id, buttonData.Name)); }
    
    public void Dispose()
    {
        _subs.Dispose();
    }

    private void OnTodoCompleted(TodoData todoData)
    {
        TodoStore.Remove(todoData.Id);
        StateHasChanged();
    }
    
    private ButtonData? GetButtonAt(int gridIndex)
    {return Portal.Buttons.FirstOrDefault(x => x.GridIndex == gridIndex);}

}