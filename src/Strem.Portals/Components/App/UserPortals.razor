@using Strem.Core.Extensions
@using Strem.Core.Events.Bus
@using Strem.Core.Events.Flows
@using System.Reactive.Disposables
@using Strem.Core.Services.Notifications
@using Strem.Portals.Data
@using Strem.Portals.Events

@inject IPortalStore PortalStore;
@inject IEventBus EventBus;
@inject INotifier Notifier;

@implements IDisposable

<div class="box">
  
  <div class="field">
    <div class="control">
      <button class="button is-success is-leveled" @onclick="() => ShowCreateModal = true">
        <span class="icon is-small">
          <i class="fas fa-globe"></i>
        </span>
        <span>Add Portal</span>
      </button>
    </div>
  </div>
  
  @if (SelectedPortal != null)
  {
    <div class="field">
      <div class="control">
          <button class="button is-danger is-leveled" @onclick="() => ShowDeletionModal = true">
            <span class="icon is-">
              <i class="fas fa-globe"></i>
            </span>
            <span>Delete Current Flow</span>
          </button>
      </div>
    </div>
  }
  
  <aside class="menu portal-menu">
    <p class="menu-label">
      <span>Portals</span>
    </p>
    <ul class="menu-list">
      @foreach (var portal in PortalStore.Portals)
      {
        <li>
          <a class="is-portal @(SelectedPortal?.Id == portal.Id ? "is-active" : "")"
             @onclick="() => SelectPortal(portal)">@portal.Name</a>
        </li>
      }
    </ul>
  </aside>
</div>

<Modal IsVisible="ShowCreateModal">
  <PortalCreator OnPortalCreated="OnPortalCreated" OnCancelled="OnModalCancelled"></PortalCreator>
</Modal>

<Modal IsVisible="ShowDeletionModal">
  @if (SelectedPortal != null)
  {
    <ConfirmDeletion DeletingName="@SelectedPortal.Name" OnDeletion="OnDeleteCurrentPortal" OnCancelled="OnModalCancelled"></ConfirmDeletion>
  }
</Modal>


@code {
  [Parameter] 
  public EventCallback<PortalData> OnPortalSelected { get; set; }

  public bool ShowCreateModal { get; set; }
  public bool ShowDeletionModal { get; set; }
  
  public PortalData? SelectedPortal { get; set; }

  private CompositeDisposable _subs = new();

  public void OnPortalCreated(PortalData newPortal)
  {
    PortalStore.Portals.Add(newPortal);
    SelectPortal(newPortal);
    ShowCreateModal = false;
    EventBus.PublishAsync(new PortalChangedEvent(newPortal.Id));
  }
  
  public void OnModalCancelled()
  {
    ShowCreateModal = false;
    ShowDeletionModal = false;
  }

  public void SelectPortal(PortalData? selectedPortal)
  {
    SelectedPortal = selectedPortal;
    OnPortalSelected.InvokeAsync(selectedPortal);
  }

  private void OnDeleteCurrentPortal()
  {
    if(SelectedPortal == null) { return; }
    PortalStore.Portals.Remove(SelectedPortal);
    EventBus.PublishAsync(new PortalChangedEvent(SelectedPortal.Id));
    Notifier.ShowNotification($"Portal '{SelectedPortal.Name}' Has Been Deleted", "is-danger");
    SelectPortal(null);
    OnModalCancelled();
    InvokeAsync(StateHasChanged);
  }
  
  public void Dispose()
  {
    _subs?.Dispose();
  }

}