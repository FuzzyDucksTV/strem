@using Strem.Core.Web
@using Strem.Infrastructure.Services.Api
@using Strem.Portals.Data
@using Microsoft.JSInterop
@using Microsoft.AspNetCore.Components
@using Strem.Core.Extensions
@using Strem.Core.Types
@using Strem.Portals.Types

@inject IJSRuntime JS
@inject IBrowserLoader BrowserLoader

<div class="box">
    <div class="field is-grouped">
        <div class="control">
            <button class="button is-info" @onclick="AddButton">Add Button</button>
        </div>
        <div class="control">
            <div class="select">
                <select @bind="@Portal.ButtonSize">
                    <EnumSelectOptions EnumType="typeof(ButtonSize)"></EnumSelectOptions>
                </select>
            </div>
        </div>
        <div class="control">
            <button class="button" @onclick="ViewPortalInBrowser">View In Browser</button>
        </div>
    </div>
    <div class="portal-page @(Enum.GetName(Portal.ButtonSize).ToLower())">
        <div class="is-flex is-flex-direction-row is-flex-wrap-wrap">
            @foreach (var buttonData in Portal.Buttons)
            {
                <a class="button portal-button m-3 is-flex is-flex-direction-column" 
                   @onclick="() => EditButton(buttonData)" style="@GetButtonStyles(buttonData)">
                    @if (buttonData.DefaultStyles.ButtonType == ButtonType.IconButton)
                    {
                        <span class="icon fa-3x m-auto">
                            <i class="fas @(buttonData.DefaultStyles.IconClass)"></i>
                        </span>
                    }
                    else if (buttonData.DefaultStyles.ButtonType == ButtonType.ImageButton)
                    {
                        <figure class="image @GetImageSize(Portal.ButtonSize)">
                            <img alt="@buttonData.DefaultStyles.Text" src="@buttonData.DefaultStyles.ImageUrl.GetImageUrl()" class="is-full" />
                        </figure>
                    }
                    <label class="label @GetTextSize(Portal.ButtonSize)" style="white-space: break-spaces; color: @(buttonData.DefaultStyles.TextColor)">@buttonData.DefaultStyles.Text</label>
                </a>
            }
        </div>
    </div>
</div>

<Modal IsVisible="ShowEditModal">
    <PortalButtonEditor ButtonData="SelectedButton" OnClosed="() => ShowEditModal = false"></PortalButtonEditor>
</Modal>

@code {
    [Parameter]
    public PortalData Portal { get; set; } = new();

    public ButtonData SelectedButton { get; set; } = new ButtonData();
    public bool ShowEditModal { get; set; }

    protected override async Task OnInitializedAsync()
    {
        Task.Run(async () =>
        {
            await Task.Delay(100);
            JS.InvokeVoidAsync("processButtonPicker");
        });
    }

    public void AddButton()
    {
        var button = new ButtonData();
        
        Portal.Buttons.Add(button);
        EditButton(button);
    }

    public void EditButton(ButtonData buttonData)
    {
        SelectedButton = buttonData;
        ShowEditModal = true;
    }

    public void ViewPortalInBrowser()
    {
        var portalUrl = $"http://localhost:{ApiHostConfiguration.ApiHostPort}/portals/{Portal.Id}";
        BrowserLoader.LoadUrl(portalUrl);
    }

    public string GetButtonStyles(ButtonData buttonData)
    { return $"background-color: {buttonData.DefaultStyles.BackgroundColor}; color: {buttonData.DefaultStyles.TextColor}"; }

    private string GetImageSize(ButtonSize portalButtonSize)
    {
        if(portalButtonSize == ButtonSize.Medium) { return "is-128x128"; }
        if(portalButtonSize == ButtonSize.Large) { return "is-160x160"; }
        return "is-96x96";
    }
    
    private string GetTextSize(ButtonSize portalButtonSize)
    {
        if(portalButtonSize == ButtonSize.Medium) { return "is-size-7"; }
        if(portalButtonSize == ButtonSize.Large) { return "is-size-6"; }
        return "is-size-7";
    }

}