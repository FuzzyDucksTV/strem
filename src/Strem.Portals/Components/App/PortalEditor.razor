@using Strem.Infrastructure.Services.Api
@using Strem.Portals.Data
@using Microsoft.JSInterop
@using Microsoft.AspNetCore.Components
@using Strem.Core.Browsers.Web
@using Strem.Core.Events.Bus
@using Strem.Core.Extensions
@using Strem.Core.Types
@using Strem.Portals.Events
@using Strem.Portals.Types
@using Strem.Todos.Data

@inject IWebBrowser WebBrowser
@inject IEventBus EventBus
@inject ITodoStore TodoStore 

<div class="box">
    
    <div class="field is-grouped">
        <div class="control">
            <h3 class="title is-3 has-text-black">Editing @Portal.Name</h3>
        </div>
        <div class="control is-expanded">
            <button class="button is-primary is-pulled-right" @onclick="ViewPortalInBrowser">
                <span class="icon is-small">
                    <i class="fas fa-globe"></i>
                </span>
                <span>View In Browser</span>
            </button>
        </div>
    </div>

    <Accordion Title="Portal Settings" HeaderClasses="is-info">
        <PortalDetailsEditor Data="Portal" DataChanged="PortalDetailsChanged"></PortalDetailsEditor>
    </Accordion>
    
</div>

<div class="columns">
    <div class="column">
        <div class="box">
            <div class="field is-grouped">
                <div class="control">
                    <button class="button is-info" @onclick="AddButton">
                        <span class="icon is-small">
                            <i class="fas fa-plus"></i>
                        </span>
                        <span>Add New Button</span>
                    </button>
                </div>
            </div>
            <div class="portal-page @(Enum.GetName(Portal.ButtonSize).ToLower())">
                <div class="is-flex is-flex-direction-row is-flex-wrap-wrap">
                    @foreach (var buttonData in Portal.Buttons)
                    {
                        <a class="button portal-button m-3 is-flex is-flex-direction-column"
                           @onclick="() => EditButton(buttonData)" style="@GetButtonStyles(buttonData)">
                            @if (buttonData.DefaultStyles.ButtonType == ButtonType.IconButton)
                            {
                                <span class="icon fa-3x m-auto">
                                    <i class="fas @(buttonData.DefaultStyles.IconClass)"></i>
                                </span>
                            }
                            else if (buttonData.DefaultStyles.ButtonType == ButtonType.ImageButton)
                            {
                                <figure class="image @GetImageSize(Portal.ButtonSize)">
                                    <img alt="@buttonData.DefaultStyles.Text" src="@buttonData.DefaultStyles.ImageUrl.GetImageUrl()" class="is-full"/>
                                </figure>
                            }
                            <label class="label @GetTextSize(Portal.ButtonSize)" style="white-space: break-spaces; color: @(buttonData.DefaultStyles.TextColor)">@buttonData.DefaultStyles.Text</label>
                        </a>
                    }
                </div>
            </div>
        </div>
    </div>
    @if (Portal.ShowTodos)
    {
        var filteredTodos = GetFilteredTodos().ToArray();
        if (filteredTodos.Length > 0)
        {
            <div class="column is-one-half todo-section">
                <div class="box">
                    <PagedContent Data="filteredTodos" ElementsPerPage="5" Context="Todo" OrderBy="x => x.ExpiryDate">
                        <TodoEntry Todo="Todo" CanRemove="false"></TodoEntry>
                    </PagedContent>
                </div>
            </div>
        }
        
    }
</div>


<Modal IsVisible="ShowEditModal">
    @if (SelectedButton != null)
    {
        <PortalButtonEditor Data="SelectedButton" OnClosed="EditModalClosed"></PortalButtonEditor>
    }
</Modal>

@code {
    [Parameter]
    public PortalData Portal { get; set; } = new();

    public ButtonData SelectedButton { get; set; }
    public bool ShowEditModal { get; set; }
    
    public void AddButton()
    {
        var button = new ButtonData();
        
        Portal.Buttons.Add(button);
        EditButton(button);
    }

    public void EditButton(ButtonData buttonData)
    {
        SelectedButton = buttonData;
        ShowEditModal = true;
    }

    public void ViewPortalInBrowser()
    {
        var portalUrl = $"http://localhost:{InternalWebHostConfiguration.ApiHostPort}/portals/{Portal.Id}";
        WebBrowser.LoadUrl(portalUrl);
    }

    public IEnumerable<TodoData> GetFilteredTodos()
    {
        if (Portal.TodoTags.Count == 0)
        { return TodoStore.Todos; }

        return TodoStore.Todos
            .Where(x => Portal.TodoTags.All(requiredTag => x.Tags.Contains(requiredTag, StringComparer.OrdinalIgnoreCase)));
    }
    
    public string GetButtonStyles(ButtonData buttonData)
    { return $"background-color: {buttonData.DefaultStyles.BackgroundColor}; color: {buttonData.DefaultStyles.TextColor}"; }

    private string GetImageSize(ButtonSize portalButtonSize)
    {
        if(portalButtonSize == ButtonSize.Medium) { return "is-128x128"; }
        if(portalButtonSize == ButtonSize.Large) { return "is-160x160"; }
        return "is-96x96";
    }
    
    private string GetTextSize(ButtonSize portalButtonSize)
    {
        if(portalButtonSize == ButtonSize.Medium) { return "is-size-7"; }
        if(portalButtonSize == ButtonSize.Large) { return "is-size-6"; }
        return "is-size-7";
    }

    private void EditModalClosed()
    {
        ShowEditModal = false;
        SelectedButton = null;
        EventBus.PublishAsync(new PortalChangedEvent(Portal.Id));
    }

    private void PortalDetailsChanged()
    {
        InvokeAsync(StateHasChanged);
        EventBus.PublishAsync(new PortalChangedEvent(Portal.Id));
    }

}