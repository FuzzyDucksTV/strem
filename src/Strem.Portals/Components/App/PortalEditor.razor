@using Strem.Infrastructure.Services.Api
@using Strem.Portals.Data
@using Microsoft.JSInterop
@using Microsoft.AspNetCore.Components
@using Strem.Core.Events.Bus
@using Strem.Core.Extensions
@using Strem.Core.Services.Browsers.Web
@using Strem.Core.Types
@using Strem.Portals.Data.Overrides
@using Strem.Portals.Events
@using Strem.Portals.Extensions
@using Strem.Portals.Types
@using Strem.Todos.Data
@using Strem.Todos.Services.Stores
@using System.Reactive.Linq
@using System.Reactive.Disposables
@using Strem.Core.Services.UI.Modal

@inject IWebBrowser WebBrowser
@inject IEventBus EventBus
@inject ITodoStore TodoStore 
@inject ButtonRuntimeStyles ButtonRuntimeStyles 

@implements IDisposable

<div class="box">
    <div class="field is-grouped">
        <div class="control">
            <h3 class="title is-3 has-text-black">Editing @Portal.Name</h3>
        </div>
        <div class="control is-expanded">
            <button class="button is-primary is-pulled-right" @onclick="ViewPortalInBrowser">
                <span class="icon is-small">
                    <i class="fas fa-globe"></i>
                </span>
                <span>View In Browser</span>
            </button>
        </div>
    </div>
    <PortalDetailsEditor Data="Portal" DataChanged="PortalDetailsChanged" />
</div>

<div class="columns">
    <div class="column">
        <div class="box">
            <div class="portal-page portal-editor">
                <div class="is-flex is-flex-direction-row is-flex-wrap-wrap">
                    @for (var i = 0; i < Portal.ButtonGridSize; i++)
                    {
                        var cachedIndex = i;
                        var possibleButton = GetButtonAt(i);
                        if (possibleButton == null)
                        {
                            <DraggableElement Data="@cachedIndex" DropType="@DropTypes.None" SupportedDropTypes="new []{ DropTypes.PortalButton }" 
                                              CanDrag="false" Classes="is-flex is-flex-direction-column">
                                <PlaceholderButton ButtonSize="Portal.ButtonSize" GridIndex="@cachedIndex" ButtonPressed="AddButton">
                                    <span class="icon fa-3x m-auto">
                                        <i class="fas fa-plus has-text-white"></i>
                                    </span>
                                    <label class="label has-text-white">Add Button</label>
                                </PlaceholderButton>
                            </DraggableElement>
                        }
                        else
                        {
                            <DraggableElement Data="possibleButton" DropType="@DropTypes.PortalButton" SupportedDropTypes="@(new []{ DropTypes.PortalButton })" @key="possibleButton.Id">
                                <PortalButton ButtonId="possibleButton.Id" ButtonStyles="possibleButton.DefaultStyles" ButtonPressed="EditButton" ButtonSize="Portal.ButtonSize"/>
                            </DraggableElement>
                        }
                    }
                </div>
            </div>
        </div>
        @{
            var orphanedButtons = Portal.Buttons
                .Where(x => x.GridIndex < 0 || x.GridIndex >= Portal.ButtonGridSize).ToArray();
        }
        @if (orphanedButtons.Length > 0)
        {
            <div class="box">
                <h3 class="title is-3 has-text-black">Orphaned Buttons</h3>
                <div class="is-flex is-flex-direction-row is-flex-wrap-wrap">
                    @foreach (var button in orphanedButtons)
                    {
                        <DraggableElement Data="button" DropType="@DropTypes.PortalButton" SupportedDropTypes="@(new[] { DropTypes.None })" @key="button.Id">
                            <PortalButton ButtonId="button.Id" ButtonStyles="button.DefaultStyles" ButtonSize="Portal.ButtonSize"/>
                        </DraggableElement>
                    }
                </div>
            </div>
        }
    </div>
    @if (Portal.ShowTodos)
    {
        var filteredTodos = GetFilteredTodos().ToArray();
        if (filteredTodos.Length > 0)
        {
            <div class="column is-one-half todo-section">
                <div class="box">
                    <PagedContent Data="filteredTodos" ElementsPerPage="5" Context="Todo" OrderBy="x => x.ExpiryDate">
                        <TodoEntry Todo="Todo" CanRemove="false"></TodoEntry>
                    </PagedContent>
                </div>
            </div>
        }
    }
</div>

<ModalContent Id="portal-button-editor-modal" @ref="EditButtonModal">
    @if (SelectedButton != null)
    {
        <PortalButtonEditor Data="SelectedButton" OnClosed="ModalService.CloseModal" RequestedDeletion="DeleteButton"></PortalButtonEditor>
    }
</ModalContent>

@code {
    [CascadingParameter]
    public IDragAndDropService DragAndDropService { get; set; }

    [CascadingParameter]
    public IModalInteractionService ModalService { get; set; }
    
    [Parameter]
    public PortalData Portal { get; set; } = new();
    
    [Parameter]
    public EventCallback<Guid> RequestingDeletion { get; set; }
    
    public ButtonData SelectedButton { get; set; }
    
    public ModalElementReference EditButtonModal { get; set; }

    private CompositeDisposable _subs = new();
    
    protected override async Task OnInitializedAsync()
    {
        DragAndDropService.OnDroppedItem
            .Where(x => x.SourceDropType == DropTypes.PortalButton && 
                        x.DestinationDropType == DropTypes.PortalButton)
            .Subscribe(SwapButtons)
            .AddTo(_subs);
        
        DragAndDropService.OnDroppedItem
            .Where(x => (x.SourceDropType == DropTypes.PortalButton) && 
                        x.DestinationDropType == DropTypes.None)
            .Subscribe(MoveButton)
            .AddTo(_subs);
    }

    public void SwapButtons(DropData data)
    {
        var destinationButton = data.DestinationObject as ButtonData;
        var sourceButton = data.SourceObject as ButtonData;
        var destinationGridIndex = destinationButton.GridIndex;
        destinationButton.GridIndex = sourceButton.GridIndex;
        sourceButton.GridIndex = destinationGridIndex;
        InvokeAsync(StateHasChanged);
        EventBus.PublishAsync(new PortalChangedEvent(Portal.Id));
    }

    public void MoveButton(DropData data)
    {
        var sourceButton = data.SourceObject as ButtonData;
        var newIndex = (int)data.DestinationObject;
        sourceButton.GridIndex = newIndex;
        InvokeAsync(StateHasChanged);
        EventBus.PublishAsync(new PortalChangedEvent(Portal.Id));
    }

    public void AddButton(int gridIndex)
    {
        var button = new ButtonData { GridIndex = gridIndex };
        Portal.Buttons.Add(button);
        EditButton(button.Id);
    }

    public void EditButton(Guid buttonId)
    {
        var button = Portal.Buttons.SingleOrDefault(x => x.Id == buttonId);
        if(button == null) { return; }
        
        SelectedButton = button;
        ModalService.ShowModal(EditButtonModal.Reference);
    }

    public void ViewPortalInBrowser()
    {
        var portalUrl = $"http://localhost:{InternalWebHostConfiguration.ApiHostPort}/portals/{Portal.Id}";
        WebBrowser.LoadUrl(portalUrl);
    }

    public IEnumerable<TodoData> GetFilteredTodos()
    {
        if (Portal.TodoTags.Count == 0)
        { return TodoStore.Data; }

        return TodoStore.Data
            .Where(x => Portal.TodoTags.All(requiredTag => x.Tags.Contains(requiredTag, StringComparer.OrdinalIgnoreCase)));
    }
    
    private void ButtonEditModalClosed()
    {
        ModalService.CloseModal();
        EventBus.PublishAsync(new PortalButtonChangedEvent(Portal.Id, SelectedButton.Id));
        ButtonRuntimeStyles.RefreshStylesFor(Portal.Id, SelectedButton);
        SelectedButton = null;
    }

    private void PortalDetailsChanged()
    {
        InvokeAsync(StateHasChanged);
        EventBus.PublishAsync(new PortalChangedEvent(Portal.Id));
    }

    private void DeleteButton(Guid obj)
    {
        ModalService.CloseModal();
        Portal.Buttons.Remove(SelectedButton);
        SelectedButton = null;
        EventBus.PublishAsync(new PortalChangedEvent(Portal.Id));
    }

    private void OnPortalDeletion()
    { RequestingDeletion.InvokeAsync(Portal.Id); }

    private ButtonData? GetButtonAt(int gridIndex)
    {return Portal.Buttons.FirstOrDefault(x => x.GridIndex == gridIndex);}

    public void Dispose()
    { _subs.Dispose(); }

}