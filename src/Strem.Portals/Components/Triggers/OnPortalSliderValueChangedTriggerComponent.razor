@using Microsoft.AspNetCore.Components
@using Strem.Portals.Services.Stores
@using Strem.Portals.Types
@inherits Strem.Flows.Components.Triggers.CustomTriggerComponent<Strem.Portals.Flows.Triggers.OnPortalSliderValueChangedTriggerData>

@inject IPortalStore PortalStore

<div class="field">
    <label class="label">Required Portal</label>
    <div class="control">
        <DataSelectInput @bind-Value="Data.RequiredPortalId" Data="PortalStore.Data" GetName="x => x.Name" GetValue="x => x.Id" MapValue="x => Guid.Parse(x.ToString())" />
    </div>
    <HelperInfo>This lets you specify which portal should be used as the trigger</HelperInfo>
</div>
@if (Data.RequiredPortalId != Guid.Empty)
{
    var portal = PortalStore.Get(Data.RequiredPortalId);
    if (portal != null)
    {
        <div class="field">
            <label class="label">Portal Slider</label>
            <div class="control">
                <DataSelectInput @bind-Value="Data.RequiredElementId" Data="portal.Elements.Where(x => x.ElementType == GridElementType.Slider)" GetName="x => x.Name" GetValue="x => x.Id" MapValue="x => Guid.Parse(x.ToString())" />
            </div>
            <HelperInfo>This lets you specify which button you want to listen for presses on</HelperInfo>
        </div>
    }
}

@code {
    public override string Title => GetTitle();

    public string GetTitle()
    {
        if(Data.RequiredPortalId == Guid.Empty && Data.RequiredElementId == Guid.Empty)
        { return $"On Portal Slider Value Changed"; }

        var portal = PortalStore.Get(Data.RequiredPortalId);
        var element = portal?.Elements.SingleOrDefault(x => x.Id == Data.RequiredElementId);
        if(element == null) { return "On Portal Slider Value Changed"; }

        return $"On {element.Name} Value Changed In {portal.Name}";
    }
}