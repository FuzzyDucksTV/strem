@using Microsoft.AspNetCore.Components
@using Strem.Core.State
@using Strem.OBS.Extensions
@using Strem.OBS.Services.Client

@inherits Strem.Core.Components.Triggers.CustomTriggerComponent<Strem.OBS.Flows.Triggers.OnVisibilityStateChangedTriggerData>

@inject IAppState AppState;
@inject IObservableOBSClient ObsClient;

<div class="field">
    <label class="label">Source Name</label>
    <div class="control">
        <AutoComplete @bind-Value="@Data.SourceName" Data="CurrentSceneItems"></AutoComplete>
    </div>
</div>
<div class="field">
    <div class="control">
        <label class="checkbox">
            <input type="checkbox" @bind="Data.TriggerOnVisible">
            Trigger When Visible?
        </label>
    </div>
</div>
<div class="field">
    <div class="control">
        <label class="checkbox">
            <input type="checkbox" @bind="Data.TriggerOnInvisible">
            Trigger When Invisible?
        </label>
    </div>
</div>

<div class="field">
    <div class="control">
        <label class="checkbox">
            <input type="checkbox" @bind="Data.TriggerOnStart">
            Trigger On Start?
        </label>
    </div>
    <HelperInfo>By default these triggers wait to be told when visibility state changes, but with this you can trigger it with the current state when it starts</HelperInfo>
</div>

@code {
    public override string Title => $"On {Data.SourceName} Visibility State Changed";

    public string[] CurrentSceneItems { get; set; } = Array.Empty<string>();
    
    protected override async Task OnInitializedAsync()
    {
        if (AppState.HasOBSHost() && ObsClient.IsConnected)
        {
            if (!AppState.HasSourceList())
            { await ObsClient.PopulateSourceListData(AppState); }
            
            CurrentSceneItems = AppState.GetSourceList();
        }
        else
        { CurrentSceneItems = Array.Empty<string>(); }
    }
}