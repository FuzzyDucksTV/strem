@page "/"

@using Strem.Core.Flows
@using Strem.Core.Flows.Registries
@using Strem.Infrastructure.Services.Persistence.Flows
@using Strem.Core.Events.Bus
@using Strem.Core.Events
@using Strem.Core.Events.Flows

@inject ISaveFlowStorePipeline SaveFlowStore
@inject IFlowStore FlowStore
@inject IEventBus EventBus

<div class="container is-fluid">
  <div class="columns is-variable is-6">
    <div class="column is-one-quarter">
      <FlowStoreMenu OnFlowSelected="x => CurrentFlow = x"></FlowStoreMenu>
      <div class="block">
          <button class="button is-info is-leveled" @onclick="SaveFlows">Force Flow Save</button>
      </div>
    </div>
    <div class="column">
    @if (CurrentFlow == null)
    {
      <h3 class="title is-3">Select A Flow To Edit</h3>
    }
    else
    {
      <FlowEditor Flow="CurrentFlow"></FlowEditor>
    }
    </div>
    <div class="column is-one-quarter">
    @if (CurrentFlow != null)
    {
      <FlowElementsMenu Flow="CurrentFlow" OnTaskSelected="AddTask" OnTriggerSelected="AddTrigger"></FlowElementsMenu>
    }
    </div>
  </div>
</div>

@code {
  public Flow CurrentFlow { get; set; }
  
  public void AddTask(TaskDescriptor descriptor)
  {
    var data = descriptor.Data();
    CurrentFlow.TaskData.Add(data);
    EventBus.PublishAsync(new FlowTasksChangedEvent(CurrentFlow.Id));
  }

  public void AddTrigger(TriggerDescriptor descriptor)
  {
    var data = descriptor.Data();
    CurrentFlow.TriggerData.Add(data);
    EventBus.PublishAsync(new FlowTriggersChangedEvent(CurrentFlow.Id));
  }

  public void SaveFlows()
  {
    SaveFlowStore.Execute(FlowStore);
  }
}