@page "/integrations"

@using Strem.Core.State
@using Strem.Core.Extensions
@using Strem.Core.Variables
@using Strem.Twitch.Extensions
@using Strem.Twitch.Services.OAuth
@using Strem.Twitch.Variables
@using System.Reactive.Linq
@using System.Reactive.Disposables
@using Strem.Core.Events
@using Strem.Twitch.Events

@inject ITwitchOAuthClient TwitchOAuthClient
@inject IAppState AppState
@inject IEventBus EventBus
@implements IDisposable

<div class="container">
    <p class="title">Integrations</p>
    
    <article class="message is-info">
        <p class="message-header">
            Twitch
            <a>
                <span class="icon is-small">
                    <i class="fab fa-twitch"></i>
                </span>
            </a>
        </p>
        <div class="message-body">
            <div class="field">
                <label class="label">Twitch Username</label>
                <div class="control">
                    <input class="input" type="text" placeholder="Link Your Twitch Account" value="@Username" disabled/>
                </div>
            </div>
            <div class="field">
                <div class="control">
                    <div class="buttons">
                        @if (IsTwitchAccountLinked)
                        {
                            <button class="button is-danger" @onclick="DisconnectFromTwitch">Disconnect From Twitch</button>
                        }
                        else
                        {
                            <button class="button is-success" @onclick="ConnectToTwitch">Connect To Twitch</button>
                        }
                    </div>
                </div>
            </div>
        </div>
    </article>
</div>

@code {

    private CompositeDisposable _subs = new();
    
    public string Username { get; set; }
    public bool IsTwitchAccountLinked { get; set; }

    protected override void OnInitialized()
    {
        IsTwitchAccountLinked = AppState.HasTwitchOAuth();
        
        if (AppState.HasTwitchVar(TwitchVariables.Username))
        { Username = AppState.GetTwitchVar(TwitchVariables.Username); }

        AppState.AppVariables.OnVariableChanged
            .Where(x => x.Name == TwitchVariables.Username && x.Context == TwitchVariables.TwitchContext)
            .Subscribe(x =>
            {
                Username = AppState.GetTwitchVar(TwitchVariables.Username);
                InvokeAsync(StateHasChanged);
            })
            .AddTo(_subs);
        
        EventBus.Receive<TwitchOAuthSuccessEvent>()
            .Subscribe(x =>
            {
                IsTwitchAccountLinked = true;
                InvokeAsync(StateHasChanged);
            })
            .AddTo(_subs);
    }
    
    public void ConnectToTwitch()
    {
        TwitchOAuthClient.StartAuthorisationProcess();
    }
    
    public void DisconnectFromTwitch()
    {
        TwitchOAuthClient.StartAuthorisationProcess();
    }

    public void Dispose()
    { _subs?.Dispose(); }

}