@using Strem.Core.Flows.Registries
@using Strem.Core.Flows
@using Strem.Core.Events.Bus
@using Strem.Core.Events.Flows
@using Strem.Core.Extensions
@using System.Reactive.Disposables

@inject IEventBus EventBus;
@inject ITaskRegistry TaskRegistry;
@inject ITriggerRegistry TriggerRegistry;

@implements IDisposable

<aside class="menu">
  <p class="menu-label">
    Triggers - General
  </p>
  <ul class="menu-list">
    @foreach (var trigger in TriggerRegistry.GetAll())
    {
      if (!DoesFlowContainTrigger(trigger))
      {
        <li><a class="has-tooltip-left has-tooltip-multiline" data-tooltip="@trigger.Trigger.Description" @onclick="() => OnTriggerSelected.InvokeAsync(trigger)">@trigger.Trigger.Name</a></li>
      }
    }
  </ul>
  <p class="menu-label">
    Tasks - General
  </p>
  <ul class="menu-list">
    @foreach (var task in TaskRegistry.GetAll())
    {
      <li><a class="has-tooltip-left has-tooltip-multiline" data-tooltip="@task.Task.Description"  @onclick="() => OnTaskSelected.InvokeAsync(task)">@task.Task.Name</a></li>
    }
  </ul>
</aside>

@code {
  [Parameter]
  public Flow Flow { get; set; }
  
  [Parameter] 
  public EventCallback<TaskDescriptor> OnTaskSelected { get; set; }
  
  [Parameter] 
  public EventCallback<TriggerDescriptor> OnTriggerSelected { get; set; }

  private CompositeDisposable _subs = new ();
  
  protected override async Task OnInitializedAsync()
  {
    EventBus.Receive<FlowTriggersChangedEvent>()
        .Subscribe(_ => InvokeAsync(StateHasChanged))
        .AddTo(_subs);
  }

  public bool DoesFlowContainTrigger(TriggerDescriptor triggerDescriptor)
  { return Flow.TriggerData.Any(x => x.Code == triggerDescriptor.Trigger.Code); }

  public void Dispose()
  {
    _subs?.Dispose();
  }

}