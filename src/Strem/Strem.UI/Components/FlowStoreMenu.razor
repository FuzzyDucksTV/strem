@using Strem.Core.Flows
@using Strem.Core.Extensions
@using Strem.Core.Events.Bus
@using Strem.Core.Events
@using Strem.Core.Events.Flows

@inject IFlowStore FlowStore;
@inject IEventBus EventBus;

<aside class="menu box">
  <div class="field">
    <div class="control">
       <button class="button is-success is-leveled" @onclick="CreateNewFlow">
          <span class="icon is-small">
            <i class="fas fa-microchip"></i>
          </span>
          <span>Add Flow</span>
        </button>
    </div>
  </div>
  <p class="menu-label">
    <span>User Flows</span>
  </p>
  <ul class="menu-list">
    @foreach (var flow in FlowStore.Flows)
    {
      <li>
        <a class="is-flow @(flow.Enabled ? "enabled" : "disabled") @(SelectedFlowId == flow.Id ? "is-active" : "")" 
           @onclick="() => SelectFlow(flow)">@flow.Name</a>
      </li>
    }
  </ul>
</aside>

<Modal IsVisible="ShowModal">
  <FlowCreator OnFlowCreated="OnFlowCreated" OnFlowCancelled="OnFlowCancelled"></FlowCreator>
</Modal>

@code {
  [Parameter] 
  public EventCallback<Flow> OnFlowSelected { get; set; }

  public bool ShowModal { get; set; } = false;
  public Guid SelectedFlowId { get; set; }

  public void OnFlowCreated(Flow newFlow)
  {
    FlowStore.Add(newFlow);
    SelectFlow(newFlow);
    ShowModal = false;
    
    EventBus.PublishAsync(new FlowAddedEvent(newFlow.Id));
  }

  public void OnFlowCancelled()
  {
    ShowModal = false;
  }

  public void SelectFlow(Flow selectedFlow)
  {
    SelectedFlowId = selectedFlow.Id;
    OnFlowSelected.InvokeAsync(selectedFlow);
  }

  public void CreateNewFlow()
  {
    ShowModal = true;
  }
}