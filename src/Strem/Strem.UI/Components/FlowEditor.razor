@using Strem.Core.Flows
@using Strem.Core.Flows.Registries
@using Strem.Core.Flows.Tasks
@using Strem.Core.Flows.Triggers
@using Strem.Core.Events.Bus
@using Strem.Core.Events.Flows
@using System.Reactive.Disposables
@using Strem.Core.Extensions
@using Strem.Core.Flows.Registries.Tasks
@using Strem.Core.Flows.Registries.Triggers

@inject IEventBus EventBus;
@inject ITaskRegistry TaskRegistry;
@inject ITriggerRegistry TriggerRegistry;

@implements IDisposable

<h3 class="title is-3 @(Flow.Enabled ? "" : "has-text-danger")">Editing Details For: @Flow.Name</h3>
@if (!Flow.Enabled)
{
  <p class="subtitle has-text-danger has-text-weight-bold">- This flow is currently disabled</p>
}
<div class="box">
  <div class="field">
    <label class="label">Flow Name</label>
    <div class="control">
      <input type="text" class="input" 
             placeholder="i.e Name of your flow"
             @bind="Flow.Name">
    </div>
  </div>
    <div class="field">
      <label class="label">Flow Category</label>
      <div class="control">
        <input type="text" class="input" 
               placeholder="i.e Name of the category for the flow"
               @bind="Flow.Category">
      </div>
      <HelperInfo>Flow categories help you group flows with similar functionality or context for easier viewing</HelperInfo>
    </div>
  <div class="field">
    <div class="control">
      <button @onclick="() => Flow.Enabled = !Flow.Enabled" class="button is-leveled @(Flow.Enabled ? "is-danger" : "is-success")">
        @(Flow.Enabled ? "Disable Flow" : "Enable Flow")
      </button>
    </div>
    <HelperInfo>When a flow is disabled it will not be invoked from any triggers or tasks</HelperInfo>
  </div>
</div>

<aside class="menu box">
  <p class="menu-label">
    Triggers
  </p>
  <ul class="menu-list">
    @foreach (var data in Flow.TriggerData)
    {
      <li class="block">
        <TriggerComponent Data="data" ComponentType="GetComponentFor(data)" IsRunning="@(ActiveTriggerId == data.Id)"
                          OnRequestedDeletion="RemoveTriggerData" OnRequestedReset="ResetTriggers" Trigger="GetTriggerFor(data)"/>
      </li>
    }
  </ul>
  <p class="menu-label">
    Tasks
  </p>
  <ul class="menu-list">
    @foreach (var data in Flow.TaskData)
    {
      <li class="block">
        <TaskComponent Data="data" ComponentType="GetComponentFor(data)" IsRunning="@(ActiveTaskId == data.Id)"
                       OnRequestedDeletion="RemoveTaskData" Task="GetTaskFor(data)"/>
      </li>
    }
  </ul>
</aside>

@code {
  [Parameter]
  public Flow Flow { get; set; }
  
  public Guid ActiveTaskId { get; set; }
  public Guid ActiveTriggerId { get; set; }
  
  public Type GetComponentFor(IFlowTaskData data) => TaskRegistry.Get(data.Code).ComponentType;
  public Type GetComponentFor(IFlowTriggerData data) => TriggerRegistry.Get(data.Code).ComponentType;
  public IFlowTask GetTaskFor(IFlowTaskData data) => TaskRegistry.Get(data.Code).Task;
  public IFlowTrigger GetTriggerFor(IFlowTriggerData data) => TriggerRegistry.Get(data.Code).Trigger;
  
  public Dictionary<string, object> GetProps(IFlowTriggerData data) => new() {
    {"Data", data },
    {"OnRequestedDeletion", EventCallback.Factory.Create(this, () => RemoveTriggerData(data) )},
    {"OnRequestedReset", EventCallback.Factory.Create(this, () => ResetTriggers(data) )}
  };

  private CompositeDisposable _subs = new();
  
  protected override Task OnInitializedAsync()
  {
    // TODO: Look at better way to indicate stuff is running to people
    /*
    EventBus.Receive<FlowTaskStarted>()
      .Subscribe(x =>
      {
        ActiveTaskId = x.TaskId;
        InvokeAsync(StateHasChanged);
      })
      .AddTo(_subs);
    
    EventBus.Receive<FlowTaskFinished>()
      .Subscribe(x =>
      {
        ActiveTaskId = Guid.Empty;
        InvokeAsync(StateHasChanged);
      })
      .AddTo(_subs);
    
    EventBus.Receive<FlowTriggerStarted>()
      .Subscribe(x =>
      {
        ActiveTriggerId = x.TriggerId;
        InvokeAsync(StateHasChanged);
      })
      .AddTo(_subs);
    
    EventBus.Receive<FlowTriggerFinished>()
      .Subscribe(x =>
      {
        ActiveTriggerId = Guid.Empty;
        InvokeAsync(StateHasChanged);
      })
      .AddTo(_subs);
    */
    return base.OnInitializedAsync();
  }

  public void RemoveTaskData(IFlowTaskData data)
  {
    Flow.TaskData.Remove(data);
  }

  public void RemoveTriggerData(IFlowTriggerData data)
  {
    Flow.TriggerData.Remove(data);
    EventBus.PublishAsync(new FlowTriggersChangedEvent(Flow.Id));
  }

  public void ResetTriggers(IFlowTriggerData data)
  { EventBus.PublishAsync(new FlowTriggersChangedEvent(Flow.Id)); }

  public void Dispose()
  {
  }

}