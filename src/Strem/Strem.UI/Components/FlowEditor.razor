@using Strem.Core.Flows
@using Strem.Core.Flows.Registries
@using Strem.Core.Flows.Tasks
@using Strem.Core.Flows.Triggers
@using Strem.Core.Events.Bus
@using Strem.Core.Events.Flows
@using System.Reactive.Disposables
@using Strem.Core.Extensions

@inject IEventBus EventBus;
@inject ITaskRegistry TaskRegistry;
@inject ITriggerRegistry TriggerRegistry;

@implements IDisposable

<p class="title">Editing Flows For: @Flow.Name</p>
<aside class="menu">
  <p class="menu-label">
    Triggers
  </p>
  <ul class="menu-list">
    @foreach (var data in Flow.TriggerData)
    {
      <li class="block">
        <TriggerComponent Data="data" ComponentType="GetComponentFor(data)" IsRunning="@(ActiveTriggerId == data.Id)"
                          OnRequestedDeletion="RemoveTriggerData" OnRequestedReset="ResetTriggers"/>
      </li>
    }
  </ul>
  <p class="menu-label">
    Tasks
  </p>
  <ul class="menu-list">
    @foreach (var data in Flow.TaskData)
    {
      <li class="block">
        <TaskComponent Data="data" ComponentType="GetComponentFor(data)" IsRunning="@(ActiveTaskId == data.Id)"
                       OnRequestedDeletion="RemoveTaskData"/>
      </li>
    }
  </ul>
</aside>

@code {
  [Parameter]
  public Flow Flow { get; set; }
  
  public Guid ActiveTaskId { get; set; }
  public Guid ActiveTriggerId { get; set; }
  
  public Type GetComponentFor(IFlowTaskData data) => TaskRegistry.Get(data.Code).ComponentType;
  public Type GetComponentFor(IFlowTriggerData data) => TriggerRegistry.Get(data.Code).ComponentType;
  
  public Dictionary<string, object> GetProps(IFlowTriggerData data) => new() {
    {"Data", data },
    {"OnRequestedDeletion", EventCallback.Factory.Create(this, () => RemoveTriggerData(data) )},
    {"OnRequestedReset", EventCallback.Factory.Create(this, () => ResetTriggers(data) )}
  };

  private CompositeDisposable _subs = new();
  
  protected override Task OnInitializedAsync()
  {
    // TODO: Look at better way to indicate stuff is running to people
    /*
    EventBus.Receive<FlowTaskStarted>()
      .Subscribe(x =>
      {
        ActiveTaskId = x.TaskId;
        InvokeAsync(StateHasChanged);
      })
      .AddTo(_subs);
    
    EventBus.Receive<FlowTaskFinished>()
      .Subscribe(x =>
      {
        ActiveTaskId = Guid.Empty;
        InvokeAsync(StateHasChanged);
      })
      .AddTo(_subs);
    
    EventBus.Receive<FlowTriggerStarted>()
      .Subscribe(x =>
      {
        ActiveTriggerId = x.TriggerId;
        InvokeAsync(StateHasChanged);
      })
      .AddTo(_subs);
    
    EventBus.Receive<FlowTriggerFinished>()
      .Subscribe(x =>
      {
        ActiveTriggerId = Guid.Empty;
        InvokeAsync(StateHasChanged);
      })
      .AddTo(_subs);
    */
    return base.OnInitializedAsync();
  }

  public void RemoveTaskData(IFlowTaskData data)
  {
    Flow.TaskData.Remove(data);
  }

  public void RemoveTriggerData(IFlowTriggerData data)
  {
    Flow.TriggerData.Remove(data);
    EventBus.PublishAsync(new FlowTriggersChangedEvent(Flow.Id));
  }

  public void ResetTriggers(IFlowTriggerData data)
  { EventBus.PublishAsync(new FlowTriggersChangedEvent(Flow.Id)); }

  public void Dispose()
  {
  }

}