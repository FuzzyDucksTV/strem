@page "/settings"
@using System.IO
@using System.Text
@using Strem.Core.State
@using Strem.Infrastructure.Services.Persistence.App
@using Strem.Infrastructure.Services.Persistence.User

@inject ILoadAppVariablesPipeline LoadUserPipeline;
@inject ILoadUserVariablesPipeline LoadAppPipeline;
@inject IAppState AppState;

<div class="container">
  <p class="title">Settings</p>
  
    <article class="message is-warning">
        <div class="message-header">
            Logs
            <a @onclick="RefreshLogs">
                <span class="icon is-small">
                    <i class="fas fa-rotate-right"></i>
                </span>
            </a>
        </div>
        <div class="message-body" style="white-space: pre-wrap; max-height: 400px; overflow-y: auto;">
            <code style="width: 100%; height: 100%;">@Logs</code>
        </div>
    </article>
    
    <article class="message is-info">
        <div class="message-header">UserData: @LoadUserPipeline.VariableFilePath</div>
        <div class="message-body">
            <table class="table">
                <thead>
                <tr>
                    <th>Name</th>
                    <th>Context</th>
                    <th>Value</th>
                </tr>
                </thead>
                <tbody>
                @foreach (var variable in AppState.UserVariables.GetAll())
                {
                    <tr>
                        <td>@variable.Key.Key</td>
                        <td>@variable.Key.Context</td>
                        <td>@variable.Value</td>
                    </tr>
                }
                </tbody>
            </table>
        </div>
    </article>
    
     <article class="message is-info">
          <div class="message-header">AppData: @LoadAppPipeline.VariableFilePath</div>
          <div class="message-body">
             <table class="table">
                 <thead>
                 <tr>
                     <th>Name</th>
                     <th>Context</th>
                     <th>Value</th>
                 </tr>
                 </thead>
                 <tbody>
                 @foreach (var variable in AppState.AppVariables.GetAll())
                 {
                     <tr>
                         <td>@variable.Key.Key</td>
                         <td>@variable.Key.Context</td>
                         <td>@variable.Value</td>
                     </tr>
                 }
                 </tbody>
             </table>
          </div>
    </article>
</div>

@code {
    public string Logs { get; set; }
    
    public async Task RefreshLogs()
    {
        var logPattern = "*.log";
        var logPath = "./logs";
        var file = new DirectoryInfo(logPath).GetFileSystemInfos().MaxBy(o => o.LastWriteTime);

        if (file == null)
        {
            Logs = "";
            return;
        }

        Logs = await LoadFileContent(file.FullName);
    }

    public async Task<string> LoadFileContent(string filePath)
    {
        using (var fs = new FileStream(filePath, FileMode.Open, FileAccess.Read, FileShare.ReadWrite))
        using (var sr = new StreamReader(fs, Encoding.Default))
        { return await sr.ReadToEndAsync(); }
    }

    protected override async Task OnInitializedAsync()
    {
        await RefreshLogs();
    }
}