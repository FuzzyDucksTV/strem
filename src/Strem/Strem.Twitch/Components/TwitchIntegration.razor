@using System.Reactive.Disposables
@using System.Reactive.Linq
@using Strem.Core.Events
@using Strem.Core.Extensions
@using Strem.Core.State
@using Strem.Twitch.Events
@using Strem.Twitch.Extensions
@using Strem.Twitch.Services.OAuth
@using Strem.Twitch.Variables

@inject ITwitchOAuthClient TwitchOAuthClient
@inject IAppState AppState
@inject IEventBus EventBus

@implements IDisposable

<article class="message is-info">
    <p class="message-header">
        Twitch
        <a>
            <span class="icon is-small">
                <i class="fab fa-twitch"></i>
            </span>
        </a>
    </p>
    <div class="message-body">
        <div class="field has-addons">
          <div class="control">
              <input class="input" type="text" placeholder="Link Twitch Account" value="@Username" disabled />
          </div>
            <div class="control">
                @if (IsTwitchAccountLinked)
                {
                    <a class="button is-danger" @onclick="DisconnectFromTwitch">Disconnect From Twitch</a>
                }
                else
                {
                    <a class="button is-success" @onclick="ConnectToTwitch">Connect To Twitch</a>
                }
            </div>
        </div>
    </div>
</article>

@code {
    
    private CompositeDisposable _subs = new();
    
    public string Username { get; set; }
    public bool IsTwitchAccountLinked { get; set; }

    protected override void OnInitialized()
    {
        IsTwitchAccountLinked = AppState.HasTwitchOAuth();
        Username = AppState.GetTwitchVar(TwitchVariables.Username);

        AppState.AppVariables.OnVariableChanged
            .Where(x => x.Name == TwitchVariables.Username && x.Context == TwitchVariables.TwitchContext)
            .Subscribe(x =>
            {
                Username = AppState.GetTwitchVar(TwitchVariables.Username);
                InvokeAsync(StateHasChanged);
            })
            .AddTo(_subs);
        
        EventBus.Receive<TwitchOAuthSuccessEvent>()
            .Subscribe(x =>
            {
                IsTwitchAccountLinked = true;
                InvokeAsync(StateHasChanged);
            })
            .AddTo(_subs);        
        
        EventBus.Receive<TwitchOAuthRevokedEvent>()
            .Subscribe(x =>
            {
                IsTwitchAccountLinked = false;
                Username = string.Empty;
                InvokeAsync(StateHasChanged);
            })
            .AddTo(_subs);
    }

    public void ConnectToTwitch()
    {
        TwitchOAuthClient.StartAuthorisationProcess();
    }

    public void DisconnectFromTwitch()
    {
        TwitchOAuthClient.RevokeToken();
    }

    public void Dispose()
    {
        _subs?.Dispose();  
    } 
}