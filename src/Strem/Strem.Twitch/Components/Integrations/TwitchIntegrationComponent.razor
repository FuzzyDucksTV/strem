@using System.Reactive.Disposables
@using System.Reactive.Linq
@using Strem.Core.Events
@using Strem.Core.Events.Bus
@using Strem.Core.Extensions
@using Strem.Core.State
@using Strem.Twitch.Events
@using Strem.Twitch.Events.OAuth
@using Strem.Twitch.Extensions
@using Strem.Twitch.Services.OAuth
@using Strem.Twitch.Variables
@using TwitchLib.Api.Helix.Models.Channels.GetChannelInformation
@using TwitchLib.Api.Helix.Models.Streams.GetStreams
@using TwitchLib.Api.Interfaces

@inject ITwitchOAuthClient TwitchOAuthClient
@inject IAppState AppState
@inject IEventBus EventBus

@implements IDisposable


<label class="label">Connection Details</label>
<div class="field is-grouped">
    <div class="control is-expanded">
        <input class="input" type="text" placeholder="Account Not Linked" value="@Username" disabled/>
    </div>
    <div class="control">
        @if (IsTwitchAccountLinked && !HavePermissionsChanged)
        {
            <a class="button is-danger" @onclick="DisconnectFromTwitch">Disconnect From Twitch</a>
        }
        else if (IsTwitchAccountLinked && HavePermissionsChanged)
        {
            <a class="button is-warning" @onclick="ConnectToTwitch">Request New Permissions</a>
        }
        else
        {
            <a class="button is-success" @onclick="ConnectToTwitch">Connect To Twitch</a>
        }
    </div>
</div>
<label class="label">Requested Privilages</label>
<TwitchScopes ExistingScopes="CurrentScopes" OnScopesChanged="RequestNewScopeAccess"></TwitchScopes>


@code {
    
    private CompositeDisposable _subs = new();
    
    public string Username { get; set; }
    public bool IsTwitchAccountLinked { get; set; }
    public bool HavePermissionsChanged { get; set; }
    public string[] CurrentScopes { get; set; } = Array.Empty<string>();
    public string[] NewScopes { get; set; } = Array.Empty<string>();

    protected override async Task OnInitializedAsync()
    {
        IsTwitchAccountLinked = AppState.HasTwitchOAuth();
        Username = AppState.AppVariables.Get(TwitchVars.Username);

        if (IsTwitchAccountLinked)
        {
            CurrentScopes = AppState.GetTwitchScopes();
            NewScopes = CurrentScopes.ToArray();
        }

        AppState.AppVariables.OnVariableChanged
            .Where(x => x == TwitchVars.Username)
            .Subscribe(x =>
            {
                Username = AppState.AppVariables.Get(TwitchVars.Username);
                InvokeAsync(StateHasChanged);
            })
            .AddTo(_subs);
        
        EventBus.Receive<TwitchOAuthSuccessEvent>()
            .Subscribe(x =>
            {
                IsTwitchAccountLinked = true;
                InvokeAsync(StateHasChanged);
            })
            .AddTo(_subs);        
        
        EventBus.Receive<TwitchOAuthRevokedEvent>()
            .Subscribe(x =>
            {
                IsTwitchAccountLinked = false;
                Username = string.Empty;
                InvokeAsync(StateHasChanged);
            })
            .AddTo(_subs);
    }

    public void ConnectToTwitch()
    {
        TwitchOAuthClient.StartAuthorisationProcess(NewScopes);
    }

    public void DisconnectFromTwitch()
    {
        TwitchOAuthClient.RevokeToken();
    }
    
    public void RequestNewScopeAccess(string[] newScopes)
    {
        NewScopes = newScopes;
        HavePermissionsChanged = true;
    }

    public void Dispose()
    {
        _subs?.Dispose();  
    } 
}