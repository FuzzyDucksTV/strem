@using Microsoft.AspNetCore.Components
@using Strem.Core.Types
@using TwitchLib.Client.Enums

@inherits CustomTriggerComponent<Strem.Twitch.Flows.Triggers.Chat.OnTwitchChatMessageTriggerData>

<div class="field">
    <label class="label">Channel</label>
    <div class="control">
        <ProcessedInput @bind-Value="Data.Channel" Placeholder="i.e optional channel name"></ProcessedInput>
    </div>
    <HelperInfo>This is an optional field and will default to your own channel, but you can listen to other channels if you have already joined them</HelperInfo>
</div>

<div class="field">
    <label class="label">Minimum Required User Type</label>
    <div class="control">
        <div class="select">
            <select @bind="Data.MinimumUserType">
                <EnumSelectOptions EnumType="typeof(UserType)"></EnumSelectOptions>
            </select>
        </div>
    </div>
    <HelperInfo>
        This allows you to restrict triggering to types of users equal to or above the level, i.e <strong>Viewer</strong> will match anyone but <strong>Moderator</strong> would match moderators, twitch staff/mods/admins and the broadcaster.
    </HelperInfo>
</div>


<div class="field">
    <label class="label">Message Content Requirements</label>
    <div class="control">
        <div class="select">
            <select @bind="Data.MatchTypeType">
                <EnumSelectOptions EnumType="typeof(TextMatchType)"></EnumSelectOptions>
            </select>
        </div>
    </div>
    <HelperInfo>This will only trigger if the text matches your requirements</HelperInfo>
</div>

@if (Data.MatchTypeType != TextMatchType.None)
{
    <div class="field">
        <label class="label">Message Match @(Data.MatchTypeType == TextMatchType.Pattern ? "Regex Pattern" : "Text")</label>
        <div class="control">
            <ProcessedInput @bind-Value="Data.MatchText" Placeholder="@(Data.MatchTypeType == TextMatchType.Pattern ? "i.e regex pattern to match" : "i.e text to matching")"></ProcessedInput>
        </div>
    </div>
    
    @if (Data.MatchTypeType == TextMatchType.Pattern)
    {
        <Accordion Title="Regex Pattern Tester">
            <RegexTester RegexPattern="@Data.MatchText"></RegexTester>
        </Accordion>
    }
}

<div class="field">
    <div class="control">
        <label class="checkbox">
            <input type="checkbox" @bind="Data.IsSubscriber">
            Require Sender To Be Subscriber?
        </label>
    </div>
    <HelperInfo>This will only trigger if the sender is a subscriber</HelperInfo>
</div>

<div class="field">
    <div class="control">
        <label class="checkbox">
            <input type="checkbox" @bind="Data.IsVip">
            Require Sender To Be A VIP?
        </label>
    </div>
    <HelperInfo>This will only trigger if the sender is a vip</HelperInfo>
</div>

<div class="field">
    <div class="control">
        <label class="checkbox">
            <input type="checkbox" @bind="Data.HasBits">
            Require Bits?
        </label>
    </div>
    <HelperInfo>This will only trigger if the message contains bits</HelperInfo>
</div>

<div class="field">
    <div class="control">
        <label class="checkbox">
            <input type="checkbox" @bind="Data.HasChannelReward">
            Require Channel Rewards?
        </label>
    </div>
    <HelperInfo>This will only trigger if the message is associated with a channel reward</HelperInfo>
</div>

@code {
    public override string Title => GenerateTitle();
    
    public string GenerateTitle()
    {
        var hasTextMatch = Data.MatchTypeType != TextMatchType.None;
        var textRequirements =  hasTextMatch ? "With Text Match " : "";
        var joiningWord = hasTextMatch ? "And " : "With ";
        var userRequirements =  Data.MinimumUserType != UserType.Viewer ? $"{joiningWord} At Least <strong>{Data.MinimumUserType}</strong>" : "";
        return $"Trigger On Twitch Message Received {textRequirements} {userRequirements}";
    }
}