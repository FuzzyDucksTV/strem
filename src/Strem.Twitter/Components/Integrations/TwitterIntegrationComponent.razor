@using System.Reactive.Disposables
@using System.Reactive.Linq
@using Strem.Core.Events.Bus
@using Strem.Core.Extensions
@using Strem.Core.State
@using Strem.Twitter.Events.OAuth
@using Strem.Twitter.Extensions
@using Strem.Twitter.Services.OAuth
@using Strem.Twitter.Variables

@inject ITwitterOAuthClient TwitterOAuthClient
@inject IAppState AppState
@inject IEventBus EventBus

@implements IDisposable

<div class="columns">
    
    <div class="column">
        <label class="label">Connected Account</label>
        <div class="field has-addons">
            <div class="control is-expanded">
                <input class="input" type="text" placeholder="Account Not Linked" value="@Username" disabled/>
            </div>
            <div class="control">
                @if (IsTwitterAccountLinked && !HavePermissionsChanged)
                {
                    <a class="button is-danger" @onclick="DisconnectFromTwitter">Disconnect From Twitter</a>
                }
                else if (IsTwitterAccountLinked && HavePermissionsChanged)
                {
                    <a class="button is-warning" @onclick="ConnectToTwitter">Request New Permissions</a>
                }
                else
                {
                    <a class="button is-success" @onclick="ConnectToTwitter">Connect To Twitter</a>
                }
            </div>
        </div>
    </div>
    
</div>

<label class="label">Requested Privilages</label>
<TwitterScopes ExistingScopes="CurrentScopes" OnScopesChanged="RequestNewScopeAccess"></TwitterScopes>

@code {
    
    private CompositeDisposable _subs = new();
    
    public string Username { get; set; }
    public bool IsTwitterAccountLinked { get; set; }
    public bool HavePermissionsChanged { get; set; }
    public string[] CurrentScopes { get; set; } = Array.Empty<string>();
    public string[] NewScopes { get; set; } = Array.Empty<string>();
    
    protected override async Task OnInitializedAsync()
    {
        IsTwitterAccountLinked = AppState.HasTwitterOAuth();
        Username = AppState.AppVariables.Get(TwitterVars.Username);

        if (IsTwitterAccountLinked)
        {
            CurrentScopes = AppState.GetTwitterScopes();
            NewScopes = CurrentScopes.ToArray();
        }

        AppState.AppVariables.OnVariableChanged
            .Where(x => x.Key == TwitterVars.Username)
            .Subscribe(x =>
            {
                Username = AppState.AppVariables.Get(TwitterVars.Username);
                InvokeAsync(StateHasChanged);
            })
            .AddTo(_subs);
        
        EventBus.Receive<TwitterOAuthSuccessEvent>()
            .Subscribe(x =>
            {
                IsTwitterAccountLinked = true;
                InvokeAsync(StateHasChanged);
            })
            .AddTo(_subs);        
        
        EventBus.Receive<TwitterOAuthRevokedEvent>()
            .Subscribe(x =>
            {
                IsTwitterAccountLinked = false;
                Username = string.Empty;
                InvokeAsync(StateHasChanged);
            })
            .AddTo(_subs);
    }

    public void ConnectToTwitter()
    {
        TwitterOAuthClient.StartAuthorisationProcess(NewScopes);
    }

    public void DisconnectFromTwitter()
    {
        TwitterOAuthClient.RevokeToken();
    }
    
    public void RequestNewScopeAccess(string[] newScopes)
    {
        NewScopes = newScopes;
        HavePermissionsChanged = true;
    }

    public void Dispose()
    {
        _subs?.Dispose();  
    } 
}