@page "/todos"

@using System.Reactive.Disposables
@using System.Reactive.Linq
@using Strem.Core.Events.Bus
@using Strem.Core.Extensions
@using Strem.Todos.Data
@using Strem.Todos.Events

@inject ITodoStore TodoStore;
@inject IEventBus EventBus;

@implements IDisposable

<div class="container is-fluid">
    <h3 class="title is-3">Todos</h3>
    <Accordion Title="Todo Sort/Filter" HeaderClasses="is-primary">
        <div class="columns">
            <div class="column">
                <div class="field">
                    <label class="label">Filter By Name</label>
                    <div class="control">
                        <input class="input" type="text" placeholder="Put in the partial name of a todo" @bind="SearchCriteria"/>
                    </div>
                </div>
            </div>
            <div class="column">
                <div class="field">
                    <label class="label">Filter By Tags</label>
                    <div class="control is-expanded">
                        <TagEditor Tags="SearchTags" OnTagsChanged="StateHasChanged"></TagEditor>
                    </div>
                </div>
            </div>
            <div class="column">
                <div class="field">
                    <label class="label">Sort By</label>
                    <div class="control is-expanded">
                        <div class="select">
                            <select @bind="SortBy">
                                <EnumSelectOptions EnumType="typeof(TodoSortBy)"></EnumSelectOptions>
                            </select>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </Accordion>
    
    @if (TodoStore.Todos.Count == 0)
    {
        <p class="title is-5">Nothing to action yet, it will refresh as data comes in</p>
    }
    else
    {
        <PagedContent Data="GetFilteredTodos()" ElementsPerPage="10" Context="Todo" SplitSize="2" OrderBy="GetOrderBy()">
            <TodoEntry Todo="Todo" OnTodoComplete="OnTodoComplete"/> 
        </PagedContent>
    }
</div>

@code {

    public enum TodoSortBy
    {
        ExpiryDate,
        CreatedDate,
        ActionType
    }

    public TodoSortBy SortBy { get; set; } = TodoSortBy.ExpiryDate;
    public string SearchCriteria { get; set; }
    public List<string> SearchTags { get; set; } = new();

    private CompositeDisposable _subs = new();

    public Func<TodoData, object> GetOrderBy()
    {
        return SortBy switch
        {
            TodoSortBy.CreatedDate => x => x.CreatedDate,
            TodoSortBy.ActionType => x => x.ActionType,
            _ => x => x.ExpiryDate
        };
    }

    public bool DoesTodoMatchFilters(TodoData todo)
    {
        if (!string.IsNullOrEmpty(SearchCriteria))
        {
            if(!todo.Title.Contains(SearchCriteria, StringComparison.OrdinalIgnoreCase))
            { return false; }
        }

        if (SearchTags.Count > 0)
        {
            if(!SearchTags.All(tag => todo.Tags.Contains(tag, StringComparer.OrdinalIgnoreCase)))
            { return false; }
        }

        return true;
    }
    
    public IReadOnlyCollection<TodoData> GetFilteredTodos()
    {
        return TodoStore.Todos
            .Where(DoesTodoMatchFilters)
            .OrderBy(GetOrderBy())
            .ToArray();
    }
    
    protected override async Task OnInitializedAsync()
    {
        Observable.Interval(TimeSpan.FromMinutes(1))
            .Subscribe(x => InvokeAsync(StateHasChanged))
            .AddTo(_subs);
    }

    public void Dispose()
    { _subs?.Dispose(); }

    private void OnTodoComplete(TodoData todo)
    {
        TodoStore.Todos.Remove(todo);
        EventBus.PublishAsync(new TodoRemovedEvent{ TodoId = todo.Id});
    }

}