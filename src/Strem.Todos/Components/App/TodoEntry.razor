@using Strem.Core.Web
@using Strem.Todos.Data

@inject IBrowserLoader BrowserLoader;

@{ var progress = GetProgress(Todo); }
<div class="box mb-3 @(GetBoxStyle(progress))">
    <div class="field is-grouped is-align-items-center">
        <div class="control is-expanded">
            <div class="has-text-white is-size-6 has-text-weight-semibold">@GetDescription(Todo)</div>
            <p class="subtitle is-size-7 has-text-weight-semibold">Created By: @Todo.CreatedBy | @Todo.CreatedDate.ToString("g")</p>
        </div>
        <div class="control has-text-centered">
            <progress class="progress mb-1 @(GetProgressStyle(progress))" value="@progress" max="100">@(progress)%</progress>
            <span class="tag  @(GetProgressStyle(progress))">@GetHoursLeftReading(Todo)h Left</span>
        </div>
        <div class="control">
            @if (Todo.ActionType == TodoActionType.Link)
            {
                <button class="button is-info" @onclick="() => ActionTodo(Todo)">
                    <span class="icon is-small">
                        <i class="fas fa-globe"></i>
                    </span>
                    <span>Load Link</span>
                </button>
            }
        </div>
        <div class="control">
            <button class="button is-danger has-tooltip-warning has-tooltip-multiline" 
                    @onclick="() => OnTodoComplete.InvokeAsync(Todo)"
                    data-tooltip="Marks the todo as done and clears from your list">
                <span class="icon is-small">
                    <i class="fas fa-check"></i>
                </span>
            </button>
        </div>
    </div>
</div>

@code {
    
    [Parameter]
    public TodoData Todo { get; set; }
    
    [Parameter]
    public EventCallback<TodoData> OnTodoComplete { get; set; }

    public int GetProgress(TodoData todo)
    {
        var timeLeft = todo.ExpiryDate - DateTime.Now;
        var totalHoursLeft = timeLeft.TotalHours;
        if(totalHoursLeft > 24) { return 100; }
        var percentage = (totalHoursLeft / 24) * 100;
        return (int)percentage;
    }

    public string GetProgressStyle(int progress)
    {
        if(progress <= 25) { return "is-danger"; }
        if(progress <= 50) { return "is-warning"; }
        return "is-success";
    }

    public string GetBoxStyle(int progress)
    {
        if(progress <= 25) { return "has-background-danger-dark"; }
        if(progress <= 50) { return "has-background-warning-dark"; }
        return "has-background-grey-dark";
    }

    public string GetHoursLeftReading(TodoData todo)
    {
        var hoursLeft = (int)(todo.ExpiryDate - DateTime.Now).TotalHours;
        if(hoursLeft > 24) { return "24+"; }
        if(hoursLeft < 0) { return "0"; }
        return hoursLeft.ToString();
    }

    public string GetDescription(TodoData todo)
    {
        return $"{todo.Title}";
    }

    public void ActionTodo(TodoData todo)
    {
        if (todo.ActionType == TodoActionType.Link)
        {
            BrowserLoader.LoadUrl(todo.Payload);
        }
    }
}