@using Strem.Core.Flows
@using Strem.Core.Extensions
@using Strem.Core.Events.Bus
@using Strem.Core.Events
@using Strem.Core.Events.Flows
@using System.Reactive.Disposables
@using System.Reactive.Linq

@inject IFlowStore FlowStore;
@inject IEventBus EventBus;

@implements IDisposable

<Accordion Title="Flow Filter" HeaderClasses="is-primary">
  <div class="field">
    <label class="label">Filter Flows By Name</label>
    <div class="control">
      <GenericInput placeholder="Put in the partial name of a flow" @bind-Value="SearchCriteria"/>
    </div>
  </div>
</Accordion>
<div class="box">
  <div class="field">
    <div class="control">
      <button class="button is-success is-leveled" @onclick="CreateNewFlow">
        <span class="icon is-small">
          <i class="fas fa-code-commit"></i>
        </span>
        <span>Add Flow</span>
      </button>
    </div>
  </div>
  <aside class="menu flow-menu">
    @foreach (var flowGroup in GetFilteredFlows())
    {
      <p class="menu-label category-@(string.IsNullOrEmpty(flowGroup.Key) ? "none" : $"{flowGroup.Key}"))">
        <span>@(string.IsNullOrEmpty(flowGroup.Key) ? "None" : $"{flowGroup.Key}")</span>
      </p>
      <ul class="menu-list">
        @foreach (var flow in flowGroup)
        {
          <li>
            <a class="is-flow @(flow.Enabled ? "enabled" : "disabled") @(SelectedFlowId == flow.Id ? "is-active" : "")"
               @onclick="() => SelectFlow(flow)">@flow.Name</a>
          </li>
        }
      </ul>
    }
  </aside>
</div>

<Modal IsVisible="ShowCreateModal">
  <FlowCreator OnFlowCreated="OnFlowCreated" OnCancelled="OnFlowCancelled"></FlowCreator>
</Modal>

@code {
  [Parameter] 
  public EventCallback<Flow> OnFlowSelected { get; set; }

  public bool ShowCreateModal { get; set; } = false;
  public Guid SelectedFlowId { get; set; }
  public string SearchCriteria { get; set; }

  private CompositeDisposable _subs = new();

  protected override async Task OnInitializedAsync()
  {
    EventBus.Receive<FlowRemovedEvent>()
      .Subscribe(x => OnFlowHasBeenRemoved())
      .AddTo(_subs);

    EventBus.Receive<FlowEnabledEvent>()
      .Subscribe(x => InvokeAsync(StateHasChanged))
      .AddTo(_subs);
    
    EventBus.Receive<FlowDisabledEvent>()
      .Subscribe(x => InvokeAsync(StateHasChanged))
      .AddTo(_subs);
  }

  public IEnumerable<IGrouping<string, Flow>> GetFilteredFlows()
  {
    if (string.IsNullOrEmpty(SearchCriteria))
    { return FlowStore.Flows.GroupBy(x => x.Category); }
    
    return FlowStore.Flows
      .Where(x => x.Name.Contains(SearchCriteria, StringComparison.OrdinalIgnoreCase))
      .GroupBy(x => x.Category);
  }
  
  public void OnFlowCreated(Flow newFlow)
  {
    FlowStore.Add(newFlow);
    SelectFlow(newFlow);
    ShowCreateModal = false;
    EventBus.PublishAsync(new FlowAddedEvent(newFlow.Id));
  }

  public void OnFlowHasBeenRemoved()
  {
    SelectedFlowId = Guid.Empty;
    OnFlowSelected.InvokeAsync(null);
    InvokeAsync(StateHasChanged);
  }

  public void OnFlowCancelled()
  {
    ShowCreateModal = false;
  }

  public void SelectFlow(Flow selectedFlow)
  {
    SelectedFlowId = selectedFlow.Id;
    OnFlowSelected.InvokeAsync(selectedFlow);
  }

  public void CreateNewFlow()
  {
    ShowCreateModal = true;
  }

  public void Dispose()
  {
    _subs?.Dispose();
  }

}