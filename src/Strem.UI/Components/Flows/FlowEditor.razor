@using Strem.Core.Flows
@using Strem.Core.Flows.Registries
@using Strem.Core.Flows.Tasks
@using Strem.Core.Flows.Triggers
@using Strem.Core.Events.Bus
@using Strem.Core.Events.Flows
@using System.Reactive.Disposables
@using Strem.Core.Components.Elements.Drag
@using Strem.Core.Extensions
@using Strem.Core.Flows.Registries.Tasks
@using Strem.Core.Flows.Registries.Triggers

@inject IEventBus EventBus;
@inject IFlowStore FlowStore;

@implements IDisposable

<h3 class="title is-3 @(Flow.Enabled ? "" : "has-text-danger")">Editing Details For: @Flow.Name</h3>
@if (!Flow.Enabled)
{
  <p class="subtitle has-text-danger has-text-weight-bold">- This flow is currently disabled</p>
  <div class="box">
    <button class="button is-danger is-leveled" @onclick="() => ShowDeleteModal = true">
      <span class="icon is-">
        <i class="fas fa-code-commit"></i>
      </span>
      <span>Delete Flow</span>
    </button>
  </div>
}
<div class="box">
  <div class="field">
    <label class="label">Flow Name</label>
    <div class="control">
      <input type="text" class="input" 
             placeholder="i.e Name of your flow"
             @bind="Flow.Name">
    </div>
  </div>
  <div class="field">
    <label class="label">Flow Category</label>
    <div class="control">
      <input type="text" class="input" 
             placeholder="i.e Name of the category for the flow"
             @bind="Flow.Category">
    </div>
    <HelperInfo>Flow categories help you group flows with similar functionality or context for easier viewing</HelperInfo>
  </div>
  <div class="field">
    <div class="control">
      <button @onclick="ToggleFlowEnablement" class="button is-leveled @(Flow.Enabled ? "is-danger" : "is-success")">
        @(Flow.Enabled ? "Disable Flow" : "Enable Flow")
      </button>
    </div>
    <HelperInfo>When a flow is disabled it will not be invoked from any triggers or tasks, it can also be deleted</HelperInfo>
  </div>
</div>

<aside class="menu box">
  <p class="menu-label">
    Triggers
  </p>
  <ul class="menu-list triggers">
    <FlowTriggersEditor Flow="Flow" TriggerAdded="NotifyTriggerChanged" TriggerDeleted="NotifyTriggerChanged" 
                        TriggersMoved="NotifyTriggerChanged" TriggerChanged="NotifyTriggerChanged"/>
  </ul>
  <p class="menu-label">
    Tasks
  </p>
  <ul class="menu-list tasks">
    <FlowTasksEditor TaskData="Flow.TaskData" TaskAdded="NotifyTaskChanged" TaskDeleted="NotifyTaskChanged" 
                     TasksMoved="NotifyTaskChanged" TaskChanged="NotifyTaskChanged"/>
  </ul>
</aside>

<Modal IsVisible="ShowDeleteModal">
  <FlowDeletion Flow="Flow" OnFlowDeleted="OnFlowDeleted" OnCancelled="OnFlowCancelled"></FlowDeletion>
</Modal>

@code {
  [Parameter]
  public Flow Flow { get; set; }
  
  public bool ShowDeleteModal { get; set; }

  public void NotifyTaskChanged(Guid taskId)
  { EventBus.PublishAsync(new FlowTaskChangedEvent(Flow.Id, taskId)); }

  public void NotifyTriggerChanged(Guid triggerId)
  { EventBus.PublishAsync(new FlowTriggerChangedEvent(Flow.Id, triggerId)); }

  private CompositeDisposable _subs = new();
  
  protected override Task OnInitializedAsync()
  {
    // TODO: Look at better way to indicate stuff is running to people
    /*
    EventBus.Receive<FlowTaskStarted>()
      .Subscribe(x =>
      {
        ActiveTaskId = x.TaskId;
        InvokeAsync(StateHasChanged);
      })
      .AddTo(_subs);
    
    EventBus.Receive<FlowTaskFinished>()
      .Subscribe(x =>
      {
        ActiveTaskId = Guid.Empty;
        InvokeAsync(StateHasChanged);
      })
      .AddTo(_subs);
    
    EventBus.Receive<FlowTriggerStarted>()
      .Subscribe(x =>
      {
        ActiveTriggerId = x.TriggerId;
        InvokeAsync(StateHasChanged);
      })
      .AddTo(_subs);
    
    EventBus.Receive<FlowTriggerFinished>()
      .Subscribe(x =>
      {
        ActiveTriggerId = Guid.Empty;
        InvokeAsync(StateHasChanged);
      })
      .AddTo(_subs);
    */
    return base.OnInitializedAsync();
  }
  
  public void OnFlowDeleted()
  {
    FlowStore.Remove(Flow);
    EventBus.PublishAsync(new FlowRemovedEvent(Flow.Id));
    ShowDeleteModal = false;
  }

  public void OnFlowCancelled()
  {
    ShowDeleteModal = false;
  }

  public void Dispose()
  {
    _subs.Dispose();
  }

  public void ToggleFlowEnablement()
  {
    Flow.Enabled = !Flow.Enabled;
    
    if (Flow.Enabled)
    { EventBus.PublishAsync(new FlowEnabledEvent(Flow.Id));}
    else
    { EventBus.PublishAsync(new FlowDisabledEvent(Flow.Id));}
  }

}