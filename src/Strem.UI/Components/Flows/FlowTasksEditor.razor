@using Strem.Core.Flows
@using Strem.Core.Flows.Registries.Tasks
@using Strem.Core.Flows.Tasks
@using Strem.Core.Extensions

@inject ITaskRegistry TaskRegistry;

@foreach (var data in Flow.TaskData)
{
  <li draggable="true"
      class="block @(DragEnter?.Id == data.Id ? "drag-enter-target" : "")"
      @key=@data.Code
      id="@data.Id"
      ondragover="event.preventDefault()"
      @ondragstart="@(() => OnDragStart(data))"
      @ondrop="@(() => OnDropOverElement(data))"
      @ondragenter="@(() => OnDragEnterElement(data))"
      @ondragend="OnDragEnd">
    
    <TaskComponent Data="data" ComponentType="GetComponentFor(data)" IsRunning="@(ActiveTaskId == data.Id)"
                   OnRequestedDeletion="RemoveTaskData" Task="GetTaskFor(data)"/>
  </li>
}

@code {
    [Parameter]
    public Flow Flow { get; set; }
    
    public Type GetComponentFor(IFlowTaskData data) => TaskRegistry.Get(data.Code).ComponentType;
    public IFlowTask GetTaskFor(IFlowTaskData data) => TaskRegistry.Get(data.Code).Task;

    public Guid ActiveTaskId { get; set; }

    public void RemoveTaskData(IFlowTaskData data)
    {
        Flow.TaskData.Remove(data);
    }
    
    protected override Task OnInitializedAsync()
    {
    // TODO: Look at better way to indicate stuff is running to people
    /*
    EventBus.Receive<FlowTaskStarted>()
      .Subscribe(x =>
      {
        ActiveTaskId = x.TaskId;
        InvokeAsync(StateHasChanged);
      })
      .AddTo(_subs);
    
    EventBus.Receive<FlowTaskFinished>()
      .Subscribe(x =>
      {
        ActiveTaskId = Guid.Empty;
        InvokeAsync(StateHasChanged);
      })
      .AddTo(_subs);
    */
        return base.OnInitializedAsync();
    }
  
  private IFlowTaskData? DraggedItem;
  private int DraggedItemIndex;
  private IFlowTaskData? DragEnter;
    
  public void OnDropOverElement(IFlowTaskData dropTarget)
  {
    DragEnter=null;
    if (DraggedItem == null) return;
    if (DraggedItem == dropTarget) return;
        
    var friendIndex = Flow.TaskData.IndexOf(dropTarget);
    Flow.TaskData.Swap(friendIndex, DraggedItemIndex);
    DraggedItem=null;
  }

  public void  OnDragStart(IFlowTaskData item)
  {
    DraggedItem = item;
    DraggedItemIndex = Flow.TaskData.IndexOf(item);
  }

  public void OnDragEnterElement(IFlowTaskData item)
  {
    if (DraggedItem == null) { return; }
    DragEnter = item;
  }

  public void  OnDragEnd()
  {
    DraggedItem = null;        
    DragEnter = null;
  }
}