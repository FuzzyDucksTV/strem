@using Strem.Core.Flows
@using Strem.Core.Flows.Registries.Triggers
@using Strem.Core.Flows.Triggers
@using Strem.Core.Events.Bus
@using Strem.Core.Events.Flows
@using Strem.Core.Events.Flows.Triggers
@using Strem.Core.Extensions
@using System.Reactive.Disposables
@using System.Reactive.Linq

@inject ITriggerRegistry TriggerRegistry;
@inject IEventBus EventBus;

@implements IDisposable

@foreach (var data in Flow.TriggerData)
{
    <li draggable="true"
        class="block @(DragEnter?.Id == data.Id ? "drag-enter-target" : "")"
        @key=@data.Id
        id="@data.Id"
        ondragover="event.preventDefault()"
        @ondragstart="@(() => OnDragStart(data))"
        @ondrop="@(() => OnDropOverElement(data))"
        @ondragenter="@(() => OnDragEnterElement(data))"
        @ondragend="OnDragEnd">
        <TriggerComponent Data="data" ComponentType="GetComponentFor(data)" IsRunning="@(ActiveTriggerId == data.Id)"
                          OnRequestedDeletion="RemoveTriggerData" OnRequestedReset="ResetTriggers" Trigger="GetTriggerFor(data)"/>
    </li>
}

@code {
    [Parameter]
    public Flow Flow { get; set; }
    
    public Guid ActiveTriggerId { get; set; }
    
    public Type GetComponentFor(IFlowTriggerData data) => TriggerRegistry.Get(data.Code).ComponentType;
    public IFlowTrigger GetTriggerFor(IFlowTriggerData data) => TriggerRegistry.Get(data.Code).Trigger;
  
    private IFlowTriggerData? DraggedItem;
    private int DraggedItemIndex;
    private IFlowTriggerData? DragEnter;
    private CompositeDisposable _subs = new();
    
    public void RemoveTriggerData(IFlowTriggerData data)
    {
        Flow.TriggerData.Remove(data);
        EventBus.PublishAsync(new FlowTriggersChangedEvent(Flow.Id));
    }

    public void ResetTriggers(IFlowTriggerData data)
    { EventBus.PublishAsync(new FlowTriggersChangedEvent(Flow.Id)); }

    public void OnDropOverElement(IFlowTriggerData dropTarget)
    {
        DragEnter=null;
        if (DraggedItem == null) return;
        if (DraggedItem == dropTarget) return;
        
        var friendIndex = Flow.TriggerData.IndexOf(dropTarget);
        Flow.TriggerData.Swap(friendIndex, DraggedItemIndex);
        DraggedItem=null;
    }

    public void  OnDragStart(IFlowTriggerData item)
    {
        DraggedItem = item;
        DraggedItemIndex = Flow.TriggerData.IndexOf(item);
    }

    public void OnDragEnterElement(IFlowTriggerData item)
    {
        if (DraggedItem == null) { return; }
        DragEnter = item;
    }

    public void  OnDragEnd()
    {
        DraggedItem = null;        
        DragEnter = null;
    }

    public void Dispose()
    {
        _subs?.Dispose();
    }

}