@using Strem.Core.Flows
@using Strem.Core.Flows.Registries.Triggers
@using Strem.Core.Flows.Triggers
@using Strem.Core.Events.Bus
@using Strem.Core.Events.Flows
@using Strem.Core.Events.Flows.Triggers
@using Strem.Core.Extensions
@using System.Reactive.Disposables
@using System.Reactive.Linq
@using Strem.Core.Types

@inject ITriggerRegistry TriggerRegistry;
@inject IEventBus EventBus;
@inject DragController DragController

@implements IDisposable

@foreach (var data in Flow.TriggerData)
{
    <DraggableListElement Data="data" DropType="@DropTypes.FlowTrigger" ContainingList="Flow.TriggerData" SupportedDropTypes="@(new[] { DropTypes.FlowTrigger, DropTypes.NewTrigger })">
        <TriggerComponent Data="data" ComponentType="GetComponentFor(data)" IsRunning="@(ActiveTriggerId == data.Id)"
                                  OnRequestedDeletion="RemoveTriggerData" OnRequestedReset="ResetTriggers" Trigger="GetTriggerFor(data)"/>
    </DraggableListElement>
}

@code {
    [Parameter]
    public Flow Flow { get; set; }
    
    public Guid ActiveTriggerId { get; set; }
    
    public Type GetComponentFor(IFlowTriggerData data) => TriggerRegistry.Get(data.Code).ComponentType;
    public IFlowTrigger GetTriggerFor(IFlowTriggerData data) => TriggerRegistry.Get(data.Code).Trigger;
  
    private CompositeDisposable _subs = new();
    
    protected override async Task OnInitializedAsync()
    {
        DragController.OnDroppedItem
            .Where(x => x.SourceDropType == DropTypes.FlowTrigger && x.DestinationDropType == DropTypes.FlowTrigger)
            .Subscribe(MoveTriggerElement)
            .AddTo(_subs);
        
        DragController.OnDroppedItem
            .Where(x => x.SourceDropType == DropTypes.NewTrigger && x.DestinationDropType == DropTypes.FlowTrigger)
            .Subscribe(AddNewTrigger)
            .AddTo(_subs);
    }
    
    public void MoveTriggerElement(DropData args)
    {
        args.SourceList.Remove(args.SourceObject);
        var indexOfDestination = args.DestinationList.IndexOf(args.DestinationObject);
        if (indexOfDestination == -1) { indexOfDestination = 0; }
        args.DestinationList.Insert(indexOfDestination, args.SourceObject);

        InvokeAsync(StateHasChanged);
    }
    
    public void AddNewTrigger(DropData args)
    {
        var indexToAddAt = args.DestinationList.IndexOf(args.DestinationObject);
        if (indexToAddAt == -1) { indexToAddAt = 0; }
        var taskDescriptor = args.SourceObject as TriggerDescriptor;
        if(taskDescriptor == null) { return; }

        var newTaskData = taskDescriptor.Data();
        args.DestinationList.Insert(indexToAddAt, newTaskData);
        InvokeAsync(StateHasChanged);
    }
    
    public void RemoveTriggerData(IFlowTriggerData data)
    {
        Flow.TriggerData.Remove(data);
        EventBus.PublishAsync(new FlowTriggersChangedEvent(Flow.Id));
    }

    public void ResetTriggers(IFlowTriggerData data)
    { EventBus.PublishAsync(new FlowTriggersChangedEvent(Flow.Id)); }

    public void Dispose()
    {
        _subs?.Dispose();
    }

}