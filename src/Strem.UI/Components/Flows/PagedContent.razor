
@typeparam T

<p class="title is-5 has-text-black">Viewing @(CurrentIndex+1)-@(GetUpperLimit()) of @(Data.Count)</p>
@foreach (var data in GetPagedData())
{
    @ChildContent(data)
}

<nav class="pagination is-centered" role="navigation" aria-label="pagination">
  <a class="pagination-previous @(HasPreviousPage ? "" : "is-disabled")" @onclick="MoveToPreviousPage">Previous</a>
  <a class="pagination-next @(HasNextPage ? "" : "is-disabled")" @onclick="MoveToNextPage">Next page</a>
</nav>

@code {
    [Parameter]
    public IReadOnlyCollection<T> Data { get; set; }
    
    [Parameter]
    public RenderFragment<T> ChildContent { get; set; }

    [Parameter]
    public int ElementsPerPage { get; set; } = 25;

    [Parameter]
    public int CurrentPage { get; set; } = 1;

    public int CurrentIndex => (CurrentPage - 1) * ElementsPerPage;
    public int TotalPages => (int)Math.Ceiling((double)Data.Count / ElementsPerPage);
    public bool HasPreviousPage => CurrentPage > 1;
    public bool HasNextPage => CurrentPage < TotalPages;

    public IEnumerable<T> GetPagedData()
    { return Data.Skip(CurrentIndex).Take(ElementsPerPage); }

    public int GetUpperLimit()
    {
        var calculated = CurrentIndex + ElementsPerPage;
        var remaining = (Data.Count - CurrentIndex);
        var upperLimit = CurrentIndex + remaining;
        return upperLimit < calculated ? upperLimit : calculated;
    }
    
    public void MoveToPreviousPage()
    {
        if (!HasPreviousPage) { return; }
        CurrentPage--; 
        StateHasChanged();
    }

    public void MoveToNextPage()
    {
        if (!HasNextPage) { return; }
        CurrentPage++;
        StateHasChanged();
    }
}