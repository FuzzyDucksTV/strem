
@typeparam T

<p class="title is-5 has-text-black">Viewing @(CurrentIndex+1)-@(GetUpperLimit()) of @(Data.Count)</p>
@{ var pagedData = GetPagedData().ToArray(); }
@for(var i=0;i<pagedData.Length;i+=SplitSize)
{
    <div class="columns">
        @for (var j = 0; j < SplitSize; j++)
        {
            <div class="column">
            @if(i+j < pagedData.Length)
            { @ChildContent(pagedData[i+j]) }
            </div>
        }
    </div> 
}

<nav class="pagination is-centered" role="navigation" aria-label="pagination">
  <a class="pagination-previous @(HasPreviousPage ? "" : "is-disabled")" @onclick="MoveToPreviousPage">Previous</a>
  <a class="pagination-next @(HasNextPage ? "" : "is-disabled")" @onclick="MoveToNextPage">Next page</a>
</nav>

@code {
    [Parameter]
    public IReadOnlyCollection<T> Data { get; set; }
    
    [Parameter]
    public RenderFragment<T> ChildContent { get; set; }

    [Parameter]
    public int ElementsPerPage { get; set; } = 25;

    [Parameter]
    public int SplitSize { get; set; } = 1;

    [Parameter]
    public int CurrentPage { get; set; } = 1;

    [Parameter]
    public Func<T, object> OrderBy { get; set; } = null;
    
    [Parameter]
    public bool OrderByDesc { get; set; }

    public int CurrentIndex => (CurrentPage - 1) * ElementsPerPage;
    public int TotalPages => (int)Math.Ceiling((double)Data.Count / ElementsPerPage);
    public bool HasPreviousPage => CurrentPage > 1;
    public bool HasNextPage => CurrentPage < TotalPages;

    public IEnumerable<T> GetPagedData()
    {
        if(OrderBy == null)
        { return Data.Skip(CurrentIndex).Take(ElementsPerPage); }

        var orderedData = OrderByDesc ? Data.OrderByDescending(OrderBy) : Data.OrderBy(OrderBy);
        return orderedData.Skip(CurrentIndex).Take(ElementsPerPage);
    }

    public int GetUpperLimit()
    {
        var calculated = CurrentIndex + ElementsPerPage;
        var remaining = (Data.Count - CurrentIndex);
        var upperLimit = CurrentIndex + remaining;
        return upperLimit < calculated ? upperLimit : calculated;
    }
    
    public void MoveToPreviousPage()
    {
        if (!HasPreviousPage) { return; }
        CurrentPage--; 
        StateHasChanged();
    }

    public void MoveToNextPage()
    {
        if (!HasNextPage) { return; }
        CurrentPage++;
        StateHasChanged();
    }
}