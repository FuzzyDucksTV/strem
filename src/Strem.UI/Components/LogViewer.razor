@using System.IO
@using System.Text
@using Strem.Infrastructure.Extensions
@using System.Diagnostics.Eventing.Reader
@using Strem.UI.Types

<div class="field">
    <label class="label">Log View Types</label>
    <div class="control">
        <EnumSelectInput T="LogViewType" @bind-Value="LogType" ValueChangedWithPrevious="_ => RefreshLogs()"></EnumSelectInput>
    </div>
</div>

<div class="block">
    <label class="label">@LogPath</label>
    <div class="block" style="white-space: pre-wrap; max-height: 400px; overflow-y: auto;">
        <code style="width: 100%; height: 100%; overflow: auto;">@LatestLogContent</code>
    </div>
    <button class="button is-info" @onclick="RefreshLogs">
        <span class="icon is-small">
          <i class="fas fa-rotate-right"></i>
        </span>
        <span>Refresh Logs</span>
    </button>
</div>

@code {
    [Parameter]
    public string LogPath { get; set; }

    [Parameter]
    public LogViewType LogType { get; set; } = LogViewType.All;

    [Parameter]
    public int LinesToRead { get; set; } = 100;
    
    public string LatestLogContent { get; set; }
    public string[] LastLogLines { get; set; }

    protected override async Task OnInitializedAsync()
    { await RefreshLogs(); }

    public async Task RefreshLogs()
    {
        LastLogLines = await LoadFileContent(LogPath);
        LatestLogContent = string.Join("\n", ShowOnlyRequestedLogs(LastLogLines).Reverse());
    }

    public IEnumerable<string> ShowOnlyRequestedLogs(IEnumerable<string> allLogs)
    {
        switch (LogType)
        {
            case LogViewType.ErrorsOnly:
                return allLogs.Where(x => x.Contains("[Error]", StringComparison.OrdinalIgnoreCase));
            case LogViewType.InformationOnly:
                return allLogs.Where(x => x.Contains("[Information]", StringComparison.OrdinalIgnoreCase));
            default:
                return allLogs;
        }
    }
    
    public async Task<string[]> LoadFileContent(string filePath)
    {
        if (!File.Exists(filePath))
        { return Array.Empty<string>(); }
        
        using (var fs = new FileStream(filePath, FileMode.Open, FileAccess.Read, FileShare.ReadWrite))
        using (var sr = new StreamReader(fs, Encoding.Default))
        {
            return await sr.TailAsync(100);
            
        }
    }
}