@page "/todos"

@using Strem.Core.Flows
@using System.Reactive.Disposables
@using System.Reactive.Linq
@using Strem.Core.Extensions
@using Strem.Core.Todo

@inject ITodoStore TodoStore;

@implements IDisposable

<div class="container is-fluid">
    <h3 class="title is-3">Todos</h3>
    @if (TodoStore.Todos.Count == 0)
    {
        <p class="title is-5">Nothing to action yet, it will refresh as data comes in</p>
    }
    else
    {
        <PagedContent Data="TodoStore.Todos" ElementsPerPage="10" Context="Todo" SplitSize="2" OrderBy="x => x.ExpiryDate">
            <TodoEntry Todo="Todo"></TodoEntry>
        </PagedContent>
    }
</div>

@code {
    private CompositeDisposable _subs = new();
    
    protected override async Task OnInitializedAsync()
    {
        var random = new Random();
        TodoStore.Todos.Add(new TodoData
        {
            Title = "Twitch Clip Needs Finalizing From Flow - Test 1",
            CreatedDate = DateTime.Now,
            ExpiryDate = DateTime.Now.Add(TimeSpan.FromHours(random.Next(0, 26))),
            Payload = "http://google.com",
            ActionType = TodoActionType.Link
        });
        
        TodoStore.Todos.Add(new TodoData
        {
            Title = "Twitch Clip Needs Finalizing",
            CreatedDate = DateTime.Now,
            ExpiryDate = DateTime.Now.Add(TimeSpan.FromHours(random.Next(0, 26))),
            Payload = "http://google.com",
            ActionType = TodoActionType.Link
        });
        
        Observable.Interval(TimeSpan.FromMinutes(1))
            .Subscribe(x => InvokeAsync(StateHasChanged))
            .AddTo(_subs);
    }

    public void Dispose()
    { _subs?.Dispose(); }
}