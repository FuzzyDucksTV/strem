@page "/todos"
@using Strem.Core.Flows
@using Strem.Core.Todo
@using Strem.Core.Web

@inject ITodoStore TodoStore;
@inject IBrowserLoader BrowserLoader;

<div class="container is-fluid box">
    <h3 class="title is-3 has-text-black">Todos</h3>
    <PagedContent Data="TodoStore.Todos" ElementsPerPage="10" Context="Todo">
        @{ var progress = GetProgress(Todo); }
        <div class="box mb-3 @(progress >= 100 ? "has-background-danger-dark" : "has-background-grey-dark")">
            <div class="field is-grouped is-align-items-center">
                <div class="control is-expanded">
                    <div class="has-text-white is-size-6 has-text-weight-semibold">@GetDescription(Todo)</div>
                    <p class="subtitle is-size-7 has-text-weight-semibold">Created At: @Todo.CreatedDate.ToString("g")</p>
                </div>
                <div class="control w-5 has-text-centered">
                    <progress class="progress mb-1 @(GetProgressStyle(progress))" value="@progress" max="100">@(progress)%</progress>
                    <span class="tag  @(GetProgressStyle(progress))">@GetHoursLeftReading(Todo)h Left</span>
                </div>
                <div class="control">
                    @if (Todo.ActionType == TodoActionType.Link)
                    {
                        <button class="button is-info" @onclick="() => ActionTodo(Todo)">Load Link</button>
                    }
                </div>
            </div>
        </div>
    </PagedContent>
</div>

@code {
    protected override async Task OnInitializedAsync()
    {
        TodoStore.Todos.Add(new TodoData
        {
            Title = "Twitch Clip Needs Finalizing From Flow - Test 1",
            CreatedDate = DateTime.Now.Subtract(TimeSpan.FromHours(10)),
            ExpiryDate = DateTime.Now,
            Payload = "http://google.com",
            ActionType = TodoActionType.Link
        });
        
        TodoStore.Todos.Add(new TodoData
        {
            Title = "Twitch Clip Needs Finalizing",
            CreatedDate = DateTime.Now,
            ExpiryDate = DateTime.Now,
            Payload = "http://google.com",
            ActionType = TodoActionType.Link
        });
    }

    public int GetProgress(TodoData todo)
    {
        var timeLeft = todo.ExpiryDate - todo.CreatedDate;
        var totalHoursLeft = timeLeft.TotalHours;
        if(totalHoursLeft > 24) { return 0; }
        var percentage = (totalHoursLeft / 24) * 100;
        return (int)Math.Ceiling(Math.Abs(percentage - 100));
    }

    public string GetProgressStyle(int progress)
    {
        if(progress >= 75) { return "is-danger"; }
        if(progress >= 50) { return "is-warning"; }
        return "is-success";
    }

    public string GetHoursLeftReading(TodoData todo)
    {
        var hoursLeft = (int)(todo.ExpiryDate - todo.CreatedDate).TotalHours;
        return hoursLeft > 24 ? "24+" : hoursLeft.ToString();
    }

    public string GetDescription(TodoData todo)
    {
        return $"{todo.Title}";
    }

    public void ActionTodo(TodoData todo)
    {
        if (todo.ActionType == TodoActionType.Link)
        {
            BrowserLoader.LoadUrl(todo.Payload);
        }
    }

}