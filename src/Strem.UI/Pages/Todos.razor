@page "/todos"

@using Strem.Core.Flows
@using Strem.Core.Todo
@using Strem.Core.Web
@using System.Reactive.Disposables
@using System.Reactive.Linq
@using Strem.Core.Extensions

@inject ITodoStore TodoStore;
@inject IBrowserLoader BrowserLoader;

@implements IDisposable

<div class="container is-fluid box">
    <h3 class="title is-3 has-text-black">Todos</h3>
    @if (TodoStore.Todos.Count == 0)
    {
        <p class="label is-size-5">Nothing to action yet, it will refresh as data comes in</p>
    }
    else
    {
        <PagedContent Data="TodoStore.Todos" ElementsPerPage="10" Context="Todo" SplitSize="2" OrderBy="x => x.ExpiryDate">
            @{ var progress = GetProgress(Todo); }
            <div class="box mb-3 @(progress <= 0 ? "has-background-danger-dark" : "has-background-grey-dark")">
                <div class="field is-grouped is-align-items-center">
                    <div class="control is-expanded">
                        <div class="has-text-white is-size-6 has-text-weight-semibold">@GetDescription(Todo)</div>
                        <p class="subtitle is-size-7 has-text-weight-semibold">Created At: @Todo.CreatedDate.ToString("g")</p>
                    </div>
                    <div class="control has-text-centered">
                        <progress class="progress mb-1 @(GetProgressStyle(progress))" value="@progress" max="100">@(progress)%</progress>
                        <span class="tag  @(GetProgressStyle(progress))">@GetHoursLeftReading(Todo)h Left</span>
                    </div>
                    <div class="control">
                        @if (Todo.ActionType == TodoActionType.Link)
                        {
                            <button class="button is-info" @onclick="() => ActionTodo(Todo)">Load Link</button>
                        }
                    </div>
                </div>
            </div>
        </PagedContent>
    }
</div>

@code {

    private CompositeDisposable _subs = new();
    
    protected override async Task OnInitializedAsync()
    {
        Observable.Interval(TimeSpan.FromMinutes(1))
            .Subscribe(x => InvokeAsync(StateHasChanged))
            .AddTo(_subs);
    }

    public int GetProgress(TodoData todo)
    {
        var timeLeft = todo.ExpiryDate - todo.CreatedDate;
        var totalHoursLeft = timeLeft.TotalHours;
        if(totalHoursLeft > 24) { return 100; }
        var percentage = (totalHoursLeft / 24) * 100;
        return (int)percentage; //(int)Math.Ceiling(Math.Abs(percentage - 100));
    }

    public string GetProgressStyle(int progress)
    {
        if(progress <= 25) { return "is-danger"; }
        if(progress <= 50) { return "is-warning"; }
        return "is-success";
    }

    public string GetHoursLeftReading(TodoData todo)
    {
        var hoursLeft = (int)(todo.ExpiryDate - todo.CreatedDate).TotalHours;
        return hoursLeft > 24 ? "24+" : hoursLeft.ToString();
    }

    public string GetDescription(TodoData todo)
    {
        return $"{todo.Title}";
    }

    public void ActionTodo(TodoData todo)
    {
        if (todo.ActionType == TodoActionType.Link)
        {
            BrowserLoader.LoadUrl(todo.Payload);
        }
    }

    public void Dispose()
    {
        _subs?.Dispose();
    }

}