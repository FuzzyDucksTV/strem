@page "/logs"
@using System.IO
@using Strem.Core.State
@using Strem.Infrastructure.Services.Persistence.App
@using Strem.Infrastructure.Services.Persistence.User

@inject ILoadAppDataPipeline LoadUserPipeline;
@inject ILoadUserDataPipeline LoadAppPipeline;
@inject ISaveAppDataPipeline SaveAppPipeline;
@inject ISaveUserDataPipeline SaveUserPipeline;
@inject IAppState AppState;

<div class="container is-fluid">
    <ErrorBoundary>
        <ChildContent>
            <h3 class="title is-3">Logs & Information</h3>
            <Accordion Title="Latest App Logs" HeaderClasses="is-warning" IsExpanded="true">
                <LogViewer LogPath="@LatestLogFile"/>
            </Accordion>

            <Accordion Title="Application Variables" HeaderClasses="is-warning" IsExpanded="true">
                <VariablesViewer Title="@($"UserData: {LoadUserPipeline.DataFilePath}")" Variables="@AppState.UserVariables" OnRequestSave="SaveUserData"/>
                <VariablesViewer Title="@($"AppData: {LoadAppPipeline.DataFilePath}")" Variables="@AppState.AppVariables" OnRequestSave="SaveAppData"/>
                <VariablesViewer Title="Transient Data" Variables="@AppState.TransientVariables"/>
            </Accordion>

            <Accordion Title="Flow Executions" HeaderClasses="is-warning" IsExpanded="true">
                <FlowExecutionViewer/>
            </Accordion>
        </ChildContent>
        <ErrorContent>
            <TheSkyIsFalling />
        </ErrorContent>
    </ErrorBoundary>
</div>

@code {
    const string LogPath = "./logs";

    public string LatestLogFile { get; set; }
    public void SaveAppData() => SaveAppPipeline.Execute(AppState.AppVariables);
    public void SaveUserData() => SaveUserPipeline.Execute(AppState.UserVariables);

    protected override async Task OnInitializedAsync()
    {
        LatestLogFile = GetLatestLogFile();
    }

    public string GetLatestLogFile()
    {
        var file = new DirectoryInfo(LogPath)
            .GetFileSystemInfos()
            .MaxBy(o => o.LastWriteTime);

        return file?.FullName ?? string.Empty;
    }
}