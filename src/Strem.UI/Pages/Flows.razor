@page "/flows"

@using Strem.Core.Flows
@using Strem.Core.Events.Bus
@using Strem.Core.Events.Flows
@using Strem.Core.Extensions
@using Strem.Core.Flows.Registries.Tasks
@using Strem.Core.Flows.Registries.Triggers
@using Strem.Core.Services.Notifications

@inject IFlowStore FlowStore
@inject IEventBus EventBus
@inject INotifier Notifier

<div class="container is-fluid">
  <ErrorBoundary>
    <ChildContent>
    <div class="columns is-variable is-6">
      <div class="column is-one-quarter">
        <UserFlows OnFlowSelected="SelectFlow"></UserFlows>
      </div>
      <div class="column">
        @if (CurrentFlow == null)
        {
          <h3 class="title is-3">Select A Flow To Edit</h3>
        }
        else
        {
          <FlowEditor Flow="CurrentFlow" RequestingDeletion="OnFlowDeleted"></FlowEditor>
        }
      </div>
      <div class="column is-one-quarter">
        @if (CurrentFlow != null)
        {
          <FlowElementsMenu Flow="CurrentFlow" OnTaskSelected="AddTask" OnTriggerSelected="AddTrigger"></FlowElementsMenu>
        }
      </div>
    </div>
    </ChildContent>
    <ErrorContent>
      <TheSkyIsFalling/>
    </ErrorContent>
  </ErrorBoundary>
</div>

@code {
  public Flow CurrentFlow { get; set; }
  
  public void AddTask(TaskDescriptor descriptor)
  {
    var data = descriptor.Data();
    CurrentFlow.TaskData.Add(data);
    EventBus.PublishAsync(new FlowTaskChangedEvent(CurrentFlow.Id, data.Id));
  }

  public void AddTrigger(TriggerDescriptor descriptor)
  {
    var data = descriptor.Data();
    CurrentFlow.TriggerData.Add(data);
    EventBus.PublishAsync(new FlowTriggerChangedEvent(CurrentFlow.Id, data.Id));
  }

  private void SelectFlow(Flow newFlow)
  {
    CurrentFlow = newFlow;
    StateHasChanged();
  }

  public void OnFlowDeleted(Guid flowId)
  {
    var flow = FlowStore.Get(flowId);
    if(flow == null) { return; }
    
    FlowStore.Remove(flow);
    EventBus.PublishAsync(new FlowRemovedEvent(flowId));
    SelectFlow(null);
    InvokeAsync(StateHasChanged);
    Notifier.ShowNotification($"Flow {flow.Name} Has Been Deleted", "is-danger");
  }
}