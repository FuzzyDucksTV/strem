@using Strem.Core.Flows.Tasks
@using Strem.Core.Flows.Triggers

<Accordion Title="@Title" StyleType="@(IsRunning ? "is-success is-running" : "is-success")">
    <div draggable="true" ondragstart="event.preventDefault(); event.stopPropagation();">
        <DynamicComponent Type="ComponentType" Parameters="GetProps()"></DynamicComponent>
        @if (Trigger.VariableOutputs.Length > 0)
        {
            <Accordion Title="Output Variables" StyleType="is-info">
                <VariableDescriptorList VariableDescriptors="Trigger.VariableOutputs"/>
            </Accordion>
        }
        <div class="field is-grouped is-grouped-right">
            <div class="control">
                <button class="button is-danger" @onclick="() => OnRequestedDeletion.InvokeAsync(Data)">Delete Trigger</button>
            </div>
            <div class="control">
                <button class="button is-info" @onclick="() => OnRequestedReset.InvokeAsync(Data)">Reset Trigger</button>
            </div>
        </div>
    </div>
</Accordion>

@code {
    [Parameter]
    public Type ComponentType { get; set; }
    
    [Parameter]
    public IFlowTriggerData Data { get; set; }
    
    [Parameter]
    public IFlowTrigger Trigger { get; set; }
    
    [Parameter]
    public bool IsRunning { get; set; }
    
    [Parameter] 
    public EventCallback<IFlowTriggerData> OnRequestedDeletion { get; set; }
    
    [Parameter] 
    public EventCallback<IFlowTriggerData> OnRequestedReset { get; set; }
    
    [Parameter]
    public string Title { get; set; }
    
    public Dictionary<string, object> GetProps() => new() {
        {"Data", Data },
        {"OnTitleChanged", EventCallback.Factory.Create<string>(this, OnTitleChanged)}
    };
    
    public void OnTitleChanged(string newTitle)
    {
        Title = newTitle;
    }
}