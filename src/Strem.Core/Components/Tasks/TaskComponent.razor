@using Strem.Core.Flows.Tasks
@using Strem.Core.Utils

@inject ICloner Cloner

<EditForm Model="EditingClone" OnValidSubmit="OnTaskEdited" @ref="_formRef">
    <DataAnnotationsValidator />  
    <Accordion Title="@Title" StyleType="@(IsRunning ? "is-info is-running" : "is-info ")">
        <div draggable="true" ondragstart="event.preventDefault(); event.stopPropagation();">
            <DynamicComponent Type="ComponentType" Parameters="GetProps()"></DynamicComponent>
            @if (Task.VariableOutputs.Length > 0)
            {
                <Accordion Title="Output Variables" StyleType="is-info">
                    <VariableDescriptorList VariableDescriptors="Task.VariableOutputs"/>
                </Accordion>
            }
            @if (HasValidationErrors)
            {
                <div class="notification is-danger">
                    <ValidationSummary />
                </div>
            }
            <div class="field is-grouped">
                <div class="control">
                    <button class="button is-danger" @onclick="() => OnRequestedDeletion.InvokeAsync(EditingClone)">Delete Task</button>
                </div>
                <div class="control is-expanded">
                    <button type="submit" class="button is-pulled-right @(HasValidationErrors ? "is-warning" : "is-primary")">Save Task</button>
                </div>
            </div>
        </div>
    </Accordion>
</EditForm>

@code {

    [Parameter]
    public Type ComponentType { get; set; }
    
    [Parameter]
    public IFlowTask Task { get; set; }
    
    [Parameter]
    public IFlowTaskData Data { get; set; }
    
    [Parameter]
    public bool IsRunning { get; set; }
    
    [Parameter] 
    public EventCallback<IFlowTaskData> OnRequestedDeletion { get; set; }
    
    [Parameter]
    public string Title { get; set; }
    
    private EditForm _formRef;

    public bool HasValidationErrors => _formRef.EditContext.GetValidationMessages().Any();
    
    public IFlowTaskData EditingClone { get; set; }

    protected override async Task OnParametersSetAsync()
    {
        EditingClone = Cloner.Clone(Data);
    }

    public Dictionary<string, object> GetProps() => new() {
        {"Data", EditingClone },
        {"OnTitleChanged", EventCallback.Factory.Create<string>(this, OnTitleChanged)}
    };

    public void OnTitleChanged(string newTitle)
    {
        Title = newTitle;
    }

    public void OnTaskEdited()
    {
        Cloner.Clone(EditingClone, Data);
    }
}