@using System.Linq.Expressions

<div class="field has-addons @(IsValid != null ? IsValid.Value ? "valid" : "invalid" : "")">
    <div class="control is-expanded">
        <input class="input" type="text" placeholder="tag name to add" @bind="TagInput" @onkeyup="AddTagIfEnterPressed">
    </div>
    <div class="control">
        <a class="button is-info" @onclick="AddTag">
            Add
        </a>
    </div>
</div>

<div class="field is-grouped is-grouped-multiline">
    @foreach (var tag in Tags)
    {
        <div class="control">
            <div class="tags has-addons">
                <span class="tag is-info">@tag</span>
                <span class="tag is-delete" @onclick="() => RemoveTag(tag)"></span>
            </div>
        </div>
    }
</div>

@code {

    [Parameter]
    public List<string> Tags { get; set; }
    public string TagInput { get; set; }

    [Parameter]
    public EventCallback OnTagsChanged { get; set; }
    
    [Parameter] 
    public Expression<Func<List<string>>>? TagsExpression { get; set; }

    [CascadingParameter] 
    protected EditContext? EditContext { get; set; } = null;


    protected FieldIdentifier? _fieldIdentifier { get; set; }
    
    public bool? IsValid
    {
        get
        {
            if (_fieldIdentifier is not { }){ return null; }
            return !EditContext.GetValidationMessages(_fieldIdentifier.Value).Any();
        }
    }

    protected override async Task OnInitializedAsync()
    {
        if (EditContext != null && TagsExpression != null)
        { _fieldIdentifier = FieldIdentifier.Create(TagsExpression); }
    }
    
    public void RefreshValidation()
    {
        if(_fieldIdentifier != null)
        { EditContext?.NotifyFieldChanged(_fieldIdentifier.Value); }
    }
    
    private void RemoveTag(string tag)
    {
        Tags.Remove(tag);
        OnTagsChanged.InvokeAsync();
        RefreshValidation();
    }

    private void AddTag()
    {
        if (string.IsNullOrEmpty(TagInput)){return;}
        if (!Tags.Contains(TagInput))
        {
            Tags.Add(TagInput.ToLower());
            OnTagsChanged.InvokeAsync();
            RefreshValidation();
        }
    
        TagInput = string.Empty;
    }

    private void AddTagIfEnterPressed(KeyboardEventArgs e)
    {
        if (e.Code is "Enter" or "NumpadEnter")
        { AddTag(); }
    }
}