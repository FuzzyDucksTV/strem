@typeparam TEnum

@inherits ValidatedInputBase<string>

<div class="enum-with-value field has-addons @(IsValid != null ? IsValid.Value ? "valid" : "invalid" : "")">
    <div class="control">
        <div class="select">
            <select value="@EnumValue" @onchange="OnEnumChanged">
                <EnumSelectOptions EnumType="typeof(TEnum)"></EnumSelectOptions>
            </select>
        </div>
    </div>
    <div class="control is-expanded">
        <ProcessedInput @bind-Value="ProxyValue" placeholder="@Placeholder"></ProcessedInput>
    </div>
</div>

@code {
    [Parameter]
    public TEnum EnumValue { get; set; }
    
    [Parameter]
    public EventCallback<TEnum> EnumValueChanged { get; set; }
    
    public string ProxyValue
    {
        get => Value;
        set => OnValueChanged(value);
    }
    
    [Parameter]
    public string Placeholder { get; set; }

    public void OnEnumChanged(ChangeEventArgs args)
    {
        EnumValueChanged.InvokeAsync((TEnum)Enum.Parse(typeof(TEnum), args.Value.ToString()));
        OnValueChanged(Value);
    }
}