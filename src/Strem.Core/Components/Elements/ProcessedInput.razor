@using System.Text.RegularExpressions
@using System.Linq.Expressions
@inherits ValidatedInputBase<string>

<div class="processed-input control has-icons-left @(IsValid != null ? IsValid.Value ? "valid" : "invalid" : "")">
    
    <input class="input @(InputVisible ? "" : "is-hidden")" type="text" placeholder="@Placeholder" value="@Value" 
           @onblur="HideInput" @onchange="e => OnValueChanged(e.Value.ToString())" @ref="_inputElement"/>

    <span class="input processed-output @(InputVisible ? "is-hidden" : "") @(string.IsNullOrEmpty(Value) ? "is-placeholder" : "")"
          @onclick="ShowInput">@((MarkupString)ProcessedContent)</span>

    <span class="icon is-small is-left">
        <i class="fas fa-v"></i>
    </span>
</div>

@code {
    public static Regex Pattern = new(@"(V\(([\w\s\.,\-_\:\|]*)\))");
    
    [Parameter]
    public string Placeholder { get; set; }
    
    public bool InputVisible { get; set; }
    public string ProcessedContent { get; set; }
    
    private ElementReference _inputElement { get; set; }

    public void HideInput()
    {
        InputVisible = false;
        ProcessContent();
    }

    public async Task ShowInput()
    {
        InputVisible = true;
        StateHasChanged();
        await Task.Delay(10);
        await _inputElement.FocusAsync();
    }

    public void ProcessContent()
    {
        if(string.IsNullOrEmpty(Value)) 
        { ProcessedContent = Placeholder; }
        else
        { ProcessedContent = Pattern.Replace(Value, VariableMatchEvaluator); }
        StateHasChanged();
    }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        ProcessContent();
    }

    public string VariableMatchEvaluator(Match x)
    {
        if (x.Groups.Count < 3) { return x.Value; }
        var matchingGroup = x.Groups[2].Value;
        var sections = matchingGroup.Split(",");
        return sections.Length switch
        {
            1 => $"<div class=\"tags has-addons\"><span class=\"tag is-success\">{sections[0].Trim()}</span></div>",
            2 => $"<div class=\"tags has-addons\"><span class=\"tag is-success\">{sections[0].Trim()}</span><span class=\"tag is-info\">{sections[1].Trim()}</span></div>",
            _ => x.Value
        };
    }

    protected override bool TryParseValueFromString(string? value, out string result, out string? validationErrorMessage)
    {
        result = value;
        validationErrorMessage = null;
        return true;
    }
}